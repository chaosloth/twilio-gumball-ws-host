var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  InputBox: () => InputBox,
  InputChevronWrapper: () => InputChevronWrapper,
  Prefix: () => Prefix,
  Suffix: () => Suffix
});

// src/InputBox.tsx
var React6 = __toESM(require("react"));
var PropTypes4 = __toESM(require("prop-types"));

// src/FauxInput/index.tsx
var React3 = __toESM(require("react"));

// src/FauxInput/DefaultFauxInput.tsx
var React = __toESM(require("react"));
var import_box = require("@twilio-paste/box");

// src/types.ts
var PropTypes = __toESM(require("prop-types"));
var FauxInputPropTypes = {
  children: PropTypes.node.isRequired,
  disabled: PropTypes.bool,
  element: PropTypes.string.isRequired,
  hasError: PropTypes.bool,
  readOnly: PropTypes.bool,
  type: PropTypes.oneOf(["text", "email", "hidden", "number", "password", "search", "tel", "date", "time"]),
  variant: PropTypes.oneOf(["default", "inverse"])
};

// src/FauxInput/DefaultFauxInput.tsx
var DefaultFauxInput = React.forwardRef(({ disabled, element, hasError, readOnly, children, type, variant }, ref) => {
  let backgroundColor = "colorBackgroundBody";
  let boxShadow = "shadowBorder";
  let boxShadowHover = "shadowBorderPrimaryStronger";
  let boxShadowActive = "shadowBorderPrimaryStronger";
  if (disabled && type !== "hidden") {
    boxShadow = "shadowBorderWeak";
    boxShadowHover = "shadowBorderWeak";
    backgroundColor = "colorBackground";
    boxShadowActive = "shadowBorderWeak";
  } else if (readOnly && type !== "hidden") {
    boxShadowHover = "shadowBorder";
    backgroundColor = "colorBackground";
  } else if (hasError && type !== "hidden") {
    boxShadow = "shadowBorderError";
    boxShadowHover = "shadowBorderErrorStronger";
  } else if (type === "hidden") {
    boxShadow = null;
    boxShadowHover = null;
    backgroundColor = null;
    boxShadowActive = null;
  }
  return /* @__PURE__ */ React.createElement(import_box.Box, {
    element,
    ref,
    display: "flex",
    width: "100%",
    backgroundColor,
    boxShadow,
    borderRadius: "borderRadius20",
    transition: "box-shadow 100ms ease-in",
    cursor: disabled ? "not-allowed" : "text",
    variant,
    _hover: {
      boxShadow: boxShadowHover
    },
    _focusWithin: {
      boxShadow: "shadowFocus"
    },
    _active: {
      boxShadow: boxShadowActive
    }
  }, children);
});
DefaultFauxInput.displayName = "DefaultFauxInput";
DefaultFauxInput.propTypes = FauxInputPropTypes;

// src/FauxInput/InverseFauxInput.tsx
var React2 = __toESM(require("react"));
var import_box2 = require("@twilio-paste/box");
var InverseFauxInput = React2.forwardRef(({ disabled, element, hasError, readOnly, children, type, variant }, ref) => {
  let backgroundColor = "colorBackgroundInverse";
  let boxShadow = "shadowBorderInverse";
  let boxShadowHover = "shadowBorderInverseStrongest";
  if (disabled && type !== "hidden") {
    backgroundColor = "colorBackgroundInverse";
    boxShadow = "shadowBorderInverseWeaker";
    boxShadowHover = "shadowBorderInverseWeaker";
  } else if (readOnly && type !== "hidden") {
    backgroundColor = "colorBackgroundInverseStrong";
    boxShadowHover = "shadowBorderInverse";
  } else if (hasError && type !== "hidden") {
    boxShadow = "shadowBorderErrorWeak";
  } else if (type === "hidden") {
    backgroundColor = null;
    boxShadow = null;
    boxShadowHover = null;
  }
  return /* @__PURE__ */ React2.createElement(import_box2.Box, {
    element,
    ref,
    display: "flex",
    width: "100%",
    backgroundColor,
    boxShadow,
    borderRadius: "borderRadius20",
    color: "colorTextInverse",
    transition: "box-shadow 100ms ease-in",
    cursor: disabled ? "not-allowed" : "text",
    variant,
    _hover: {
      boxShadow: boxShadowHover
    },
    _focusWithin: {
      backgroundColor: "colorBackgroundInverse",
      boxShadow: "shadowFocusInverse"
    },
    _active: {
      boxShadow: boxShadowHover
    }
  }, children);
});
InverseFauxInput.displayName = "InverseFauxInput";
InverseFauxInput.propTypes = FauxInputPropTypes;

// src/FauxInput/index.tsx
var FauxInputVariants = {
  default: DefaultFauxInput,
  inverse: InverseFauxInput
};
var FieldWrapper = React3.forwardRef(({ children, disabled, element, hasError, readOnly, type, variant = "default" }, ref) => {
  const FieldWrapperComponent = FauxInputVariants[variant];
  return /* @__PURE__ */ React3.createElement(FieldWrapperComponent, {
    disabled,
    element,
    hasError,
    readOnly,
    type,
    variant,
    ref
  }, children);
});
FieldWrapper.displayName = "FieldWrapper";
FieldWrapper.propTypes = FauxInputPropTypes;

// src/Prefix.tsx
var React4 = __toESM(require("react"));
var PropTypes2 = __toESM(require("prop-types"));
var import_box3 = require("@twilio-paste/box");
var Prefix = React4.forwardRef(({ children, disabled, element = "PREFIX", variant }, ref) => {
  let backgroundColor = "colorBackground";
  let borderColor = "colorBorderWeaker";
  if (disabled && variant === "inverse") {
    backgroundColor = "none";
    borderColor = "colorBorderInverseWeaker";
  } else if (variant === "inverse") {
    backgroundColor = "colorBackgroundInverseStrong";
    borderColor = "colorBorderInverse";
  }
  if (children == null)
    return null;
  return /* @__PURE__ */ React4.createElement(import_box3.Box, {
    alignItems: "flex-start",
    backgroundColor,
    borderBottomLeftRadius: "borderRadius20",
    borderRightColor: borderColor,
    borderRightStyle: "solid",
    borderRightWidth: "borderWidth10",
    borderTopLeftRadius: "borderRadius20",
    display: "flex",
    element: `${element}_PREFIX`,
    lineHeight: "lineHeight20",
    padding: "space30",
    variant,
    ref
  }, children);
});
Prefix.displayName = "Prefix";
Prefix.propTypes = {
  children: PropTypes2.node.isRequired,
  element: PropTypes2.string.isRequired,
  variant: PropTypes2.oneOf(["default", "inverse"])
};

// src/Suffix.tsx
var React5 = __toESM(require("react"));
var PropTypes3 = __toESM(require("prop-types"));
var import_box4 = require("@twilio-paste/box");
var Suffix = React5.forwardRef(({ children, disabled, element = "SUFFIX", variant }, ref) => {
  let backgroundColor = "colorBackground";
  let borderColor = "colorBorderWeaker";
  if (disabled && variant === "inverse") {
    backgroundColor = "none";
    borderColor = "colorBorderInverseWeaker";
  } else if (variant === "inverse") {
    backgroundColor = "colorBackgroundInverseStrong";
    borderColor = "colorBorderInverse";
  }
  if (children == null)
    return null;
  return /* @__PURE__ */ React5.createElement(import_box4.Box, {
    alignItems: "flex-start",
    backgroundColor,
    borderBottomRightRadius: "borderRadius20",
    borderLeftColor: borderColor,
    borderLeftStyle: "solid",
    borderLeftWidth: "borderWidth10",
    borderTopRightRadius: "borderRadius20",
    display: "flex",
    element: `${element}_SUFFIX`,
    lineHeight: "lineHeight20",
    padding: "space30",
    variant,
    ref
  }, children);
});
Suffix.displayName = "Suffix";
Suffix.propTypes = {
  children: PropTypes3.node.isRequired,
  element: PropTypes3.string.isRequired,
  variant: PropTypes3.oneOf(["default", "inverse"])
};

// src/InputBox.tsx
var InputBox = React6.forwardRef((_a, ref) => {
  var _b = _a, { children, disabled, element = "INPUT_BOX", hasError, insertAfter, insertBefore, readOnly, type, variant } = _b, props = __objRest(_b, ["children", "disabled", "element", "hasError", "insertAfter", "insertBefore", "readOnly", "type", "variant"]);
  return /* @__PURE__ */ React6.createElement(FieldWrapper, __spreadValues({
    disabled,
    element,
    hasError,
    readOnly,
    type,
    variant,
    ref
  }, props), insertBefore && /* @__PURE__ */ React6.createElement(Prefix, {
    disabled,
    element,
    variant
  }, insertBefore), children, insertAfter && /* @__PURE__ */ React6.createElement(Suffix, {
    disabled,
    element,
    variant
  }, insertAfter));
});
InputBox.displayName = "InputBox";
InputBox.propTypes = {
  children: PropTypes4.node.isRequired,
  element: PropTypes4.string.isRequired,
  disabled: PropTypes4.bool,
  hasError: PropTypes4.bool,
  insertAfter: PropTypes4.node,
  insertBefore: PropTypes4.node,
  readOnly: PropTypes4.bool,
  type: PropTypes4.oneOf(["text", "email", "hidden", "number", "password", "search", "tel", "date", "time"]),
  variant: PropTypes4.oneOf(["default", "inverse"])
};

// src/InputChevronWrapper.tsx
var React7 = __toESM(require("react"));
var PropTypes5 = __toESM(require("prop-types"));
var import_box5 = require("@twilio-paste/box");
var InputChevronWrapper = React7.forwardRef(({ children, element = "CHEVRON_WRAPPER" }, ref) => /* @__PURE__ */ React7.createElement(import_box5.Box, {
  alignItems: "center",
  display: "inline-flex",
  position: "absolute",
  pointerEvents: "none",
  right: "space30",
  top: "50%",
  transform: "translateY(-50%)",
  zIndex: "zIndex10",
  element,
  ref
}, children));
InputChevronWrapper.displayName = "InputChevronWrapper";
InputChevronWrapper.propTypes = {
  children: PropTypes5.node.isRequired,
  element: PropTypes5.string.isRequired
};
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  InputBox,
  InputChevronWrapper,
  Prefix,
  Suffix
});
