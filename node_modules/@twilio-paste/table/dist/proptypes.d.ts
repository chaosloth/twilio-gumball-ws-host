import * as PropTypes from 'prop-types';
export declare const TablePropTypes: {
    children: PropTypes.Validator<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
    element: PropTypes.Requireable<string>;
    isActionable: PropTypes.Requireable<boolean>;
    scrollHorizontally: PropTypes.Requireable<boolean>;
    noWrap: PropTypes.Requireable<boolean>;
    striped: PropTypes.Requireable<boolean>;
    tableLayout: PropTypes.Requireable<import("@twilio-paste/types").ValueOf<{
        readonly AUTO: "auto";
        readonly FIXED: "fixed";
    }>>;
    variant: PropTypes.Requireable<import("@twilio-paste/types").ValueOf<{
        readonly DEFAULT: "default";
        readonly BORDERLESS: "borderless";
    }>>;
};
export declare const THeadPropTypes: {
    children: PropTypes.Validator<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
    element: PropTypes.Requireable<string>;
};
export declare const TBodyPropTypes: {
    children: PropTypes.Validator<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
    element: PropTypes.Requireable<string>;
};
export declare const TrPropTypes: {
    children: PropTypes.Validator<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
    element: PropTypes.Requireable<string>;
    verticalAlign: PropTypes.Requireable<import("@twilio-paste/types").ValueOf<{
        readonly TOP: "top";
        readonly MIDDLE: "middle";
        readonly BOTTOM: "bottom";
    }>>;
};
export declare const ThPropTypes: {
    children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    element: PropTypes.Requireable<string>;
    textAlign: PropTypes.Requireable<import("@twilio-paste/types").ValueOf<{
        readonly LEFT: "left";
        readonly CENTER: "center";
        readonly RIGHT: "right";
    }>>;
    width: PropTypes.Requireable<any>;
};
export declare const TdPropTypes: {
    children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    element: PropTypes.Requireable<string>;
    textAlign: PropTypes.Requireable<import("@twilio-paste/types").ValueOf<{
        readonly LEFT: "left";
        readonly CENTER: "center";
        readonly RIGHT: "right";
    }>>;
};
export declare const TFootPropTypes: {
    children: PropTypes.Validator<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
    element: PropTypes.Requireable<string>;
};
//# sourceMappingURL=proptypes.d.ts.map