var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/ChatBubble.tsx
import * as React2 from "react";
import * as PropTypes from "prop-types";
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";

// src/MessageVariantContext.tsx
import * as React from "react";
var MessageVariantContext = React.createContext("inbound");

// src/styles.ts
var bubbleVariantStyles = {
  inbound: {
    backgroundColor: "colorBackground"
  },
  outbound: {
    backgroundColor: "colorBackgroundPrimaryWeakest"
  }
};
var messageVariantStyles = {
  inbound: {
    marginRight: "space70"
  },
  outbound: {
    marginLeft: "space70"
  }
};

// src/ChatBubble.tsx
var ChatBubble = React2.forwardRef((_a, ref) => {
  var _b = _a, { children, element = "CHAT_BUBBLE" } = _b, props = __objRest(_b, ["children", "element"]);
  const variant = React2.useContext(MessageVariantContext);
  return /* @__PURE__ */ React2.createElement(Box, __spreadValues(__spreadValues({
    fontSize: "fontSize30",
    lineHeight: "lineHeight20",
    borderRadius: "borderRadius30",
    paddingY: "space30",
    paddingX: "space40",
    marginBottom: "space30",
    element,
    ref,
    variant
  }, bubbleVariantStyles[variant]), safelySpreadBoxProps(props)), children);
});
ChatBubble.displayName = "ChatBubble";
ChatBubble.propTypes = {
  children: PropTypes.node,
  element: PropTypes.string
};

// src/ChatMessage.tsx
import * as React3 from "react";
import * as PropTypes2 from "prop-types";
import { Box as Box2, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
var ChatMessage = React3.forwardRef((_a, ref) => {
  var _b = _a, { children, variant, element = "CHAT_MESSAGE" } = _b, props = __objRest(_b, ["children", "variant", "element"]);
  return /* @__PURE__ */ React3.createElement(MessageVariantContext.Provider, {
    value: variant
  }, /* @__PURE__ */ React3.createElement(Box2, __spreadValues(__spreadValues({
    as: "li",
    listStyleType: "none",
    marginBottom: "space80",
    ref,
    element,
    variant
  }, messageVariantStyles[variant]), safelySpreadBoxProps2(props)), children));
});
ChatMessage.displayName = "ChatMessage";
ChatMessage.propTypes = {
  children: PropTypes2.node,
  variant: PropTypes2.oneOf(["inbound", "outbound"]).isRequired,
  element: PropTypes2.string
};

// src/ChatMessageMeta.tsx
import * as React4 from "react";
import * as PropTypes3 from "prop-types";
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps3 } from "@twilio-paste/box";
var ChatMessageMeta = React4.forwardRef((_a, ref) => {
  var _b = _a, { children, element = "CHAT_MESSAGE_META" } = _b, props = __objRest(_b, ["children", "element"]);
  const variant = React4.useContext(MessageVariantContext);
  const hasMultipleChildren = React4.Children.count(children) > 1;
  return /* @__PURE__ */ React4.createElement(Box3, __spreadValues({
    ref,
    element,
    display: "flex",
    justifyContent: hasMultipleChildren ? "space-between" : "flex-end",
    textAlign: !hasMultipleChildren ? "right" : void 0,
    alignItems: "flex-start",
    variant,
    columnGap: "space40"
  }, safelySpreadBoxProps3(props)), children);
});
ChatMessageMeta.displayName = "ChatMessageMeta";
ChatMessageMeta.propTypes = {
  "aria-label": PropTypes3.string.isRequired,
  children: PropTypes3.node.isRequired,
  element: PropTypes3.string
};

// src/ChatMessageMetaItem.tsx
import * as React5 from "react";
import * as PropTypes4 from "prop-types";
import { Box as Box4, safelySpreadBoxProps as safelySpreadBoxProps4 } from "@twilio-paste/box";
var ChatMessageMetaItem = React5.forwardRef((_a, ref) => {
  var _b = _a, { children, element = "CHAT_MESSAGE_META_ITEM" } = _b, props = __objRest(_b, ["children", "element"]);
  return /* @__PURE__ */ React5.createElement(Box4, __spreadValues({
    ref,
    element,
    display: "flex",
    alignItems: "center",
    columnGap: "space30",
    color: "colorTextWeak",
    lineHeight: "lineHeight20",
    fontSize: "fontSize20",
    _last: { textAlign: "right" }
  }, safelySpreadBoxProps4(props)), children);
});
ChatMessageMetaItem.displayName = "ChatMessageMetaItem";
ChatMessageMetaItem.propTypes = {
  children: PropTypes4.node.isRequired,
  element: PropTypes4.string
};
export {
  ChatBubble,
  ChatMessage,
  ChatMessageMeta,
  ChatMessageMetaItem
};
