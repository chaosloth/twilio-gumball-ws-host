var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/index.tsx
import * as React from "react";
import * as PropTypes from "prop-types";
import { Box, safelySpreadBoxProps } from "@twilio-paste/box";
import { MediaObject, MediaFigure, MediaBody } from "@twilio-paste/media-object";
import { Button } from "@twilio-paste/button";

// ../screen-reader-only/dist/index.es.js
import * as t from "react";
import * as f from "prop-types";
import { Box as P } from "@twilio-paste/box";
var x = Object.defineProperty;
var y = Object.defineProperties;
var R = Object.getOwnPropertyDescriptors;
var p = Object.getOwnPropertySymbols;
var i = Object.prototype.hasOwnProperty;
var s = Object.prototype.propertyIsEnumerable;
var d = (e, r, o) => r in e ? x(e, r, { enumerable: true, configurable: true, writable: true, value: o }) : e[r] = o;
var c = (e, r) => {
  for (var o in r || (r = {}))
    i.call(r, o) && d(e, o, r[o]);
  if (p)
    for (var o of p(r))
      s.call(r, o) && d(e, o, r[o]);
  return e;
};
var l = (e, r) => y(e, R(r));
var m = (e, r) => {
  var o = {};
  for (var n in e)
    i.call(e, n) && r.indexOf(n) < 0 && (o[n] = e[n]);
  if (e != null && p)
    for (var n of p(e))
      r.indexOf(n) < 0 && s.call(e, n) && (o[n] = e[n]);
  return o;
};
var h = t.forwardRef((N, n) => {
  var a = N, { as: e = "span", children: r } = a, o = m(a, ["as", "children"]);
  return t.createElement(P, l(c({}, o), { as: e, border: "none", clip: "rect(0 0 0 0)", height: "1px", margin: "spaceNegative10", overflow: "hidden", padding: "space0", position: "absolute", ref: n, textTransform: "none", whiteSpace: "nowrap", width: "1px" }), r);
});
h.displayName = "ScreenReaderOnly";

// src/index.tsx
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
import { ErrorIcon } from "@twilio-paste/icons/esm/ErrorIcon";
import { NeutralIcon } from "@twilio-paste/icons/esm/NeutralIcon";
import { WarningIcon } from "@twilio-paste/icons/esm/WarningIcon";
var AlertRoles = {
  ERROR: "alert",
  NEUTRAL: "status",
  WARNING: "alert"
};
var AlertVariants = {
  ERROR: "error",
  NEUTRAL: "neutral",
  WARNING: "warning"
};
var AlertBackgroundColors = {
  ERROR: "colorBackgroundErrorWeakest",
  NEUTRAL: "colorBackgroundNeutralWeakest",
  WARNING: "colorBackgroundWarningWeakest"
};
var AlertBorderColors = {
  ERROR: "colorBorderErrorWeak",
  NEUTRAL: "colorBorderNeutralWeak",
  WARNING: "colorBorderWarningWeak"
};
var renderAlertIcon = (variant, element, title) => {
  switch (variant) {
    case AlertVariants.ERROR:
      return /* @__PURE__ */ React.createElement(ErrorIcon, {
        element: `${element}_ICON`,
        color: "colorTextIconError",
        decorative: false,
        title,
        size: "sizeIcon20"
      });
    case AlertVariants.WARNING:
      return /* @__PURE__ */ React.createElement(WarningIcon, {
        element: `${element}_ICON`,
        color: "colorTextIconWarning",
        decorative: false,
        title,
        size: "sizeIcon20"
      });
    case AlertVariants.NEUTRAL:
    default:
      return /* @__PURE__ */ React.createElement(NeutralIcon, {
        element: `${element}_ICON`,
        color: "colorTextIconNeutral",
        decorative: false,
        title,
        size: "sizeIcon20"
      });
  }
};
var Alert = React.forwardRef((_a, ref) => {
  var _b = _a, {
    children,
    onDismiss,
    variant,
    role,
    element = "ALERT",
    i18nDismissLabel = "Dismiss alert",
    i18nErrorLabel = "(error)",
    i18nNeutralLabel = "(information)",
    i18nWarningLabel = "(warning)"
  } = _b, props = __objRest(_b, [
    "children",
    "onDismiss",
    "variant",
    "role",
    "element",
    "i18nDismissLabel",
    "i18nErrorLabel",
    "i18nNeutralLabel",
    "i18nWarningLabel"
  ]);
  const i18nLabelVariantMap = {
    error: i18nErrorLabel,
    neutral: i18nNeutralLabel,
    warning: i18nWarningLabel
  };
  return /* @__PURE__ */ React.createElement(Box, __spreadProps(__spreadValues({}, safelySpreadBoxProps(props)), {
    backgroundColor: AlertBackgroundColors[variant.toUpperCase()],
    borderColor: AlertBorderColors[variant.toUpperCase()],
    borderBottomWidth: "borderWidth20",
    borderBottomStyle: "solid",
    paddingLeft: "space60",
    paddingRight: "space60",
    paddingTop: "space50",
    paddingBottom: "space50",
    element,
    variant,
    ref,
    role: role != null ? role : AlertRoles[variant.toUpperCase()]
  }), /* @__PURE__ */ React.createElement(MediaObject, {
    as: "div"
  }, /* @__PURE__ */ React.createElement(MediaFigure, {
    as: "div",
    spacing: "space30"
  }, renderAlertIcon(variant, element, i18nLabelVariantMap[variant])), /* @__PURE__ */ React.createElement(MediaBody, {
    as: "div"
  }, children), onDismiss && typeof onDismiss === "function" && /* @__PURE__ */ React.createElement(MediaFigure, {
    align: "end",
    spacing: "space60"
  }, /* @__PURE__ */ React.createElement(Button, {
    onClick: onDismiss,
    variant: "secondary_icon",
    size: "reset",
    element: `${element}_DISMISS_BUTTON`
  }, /* @__PURE__ */ React.createElement(CloseIcon, {
    element: `${element}_DISMISS_ICON`,
    decorative: true,
    size: "sizeIcon20"
  }), /* @__PURE__ */ React.createElement(h, null, i18nDismissLabel)))));
});
Alert.displayName = "Alert";
Alert.propTypes = {
  children: PropTypes.node.isRequired,
  onDismiss: PropTypes.func,
  role: PropTypes.string,
  variant: PropTypes.oneOf(Object.values(AlertVariants)).isRequired,
  element: PropTypes.string,
  i18nDismissLabel: PropTypes.string,
  i18nErrorLabel: PropTypes.string,
  i18nNeutralLabel: PropTypes.string,
  i18nWarningLabel: PropTypes.string
};
export {
  Alert,
  AlertBackgroundColors,
  AlertBorderColors,
  AlertRoles,
  AlertVariants
};
