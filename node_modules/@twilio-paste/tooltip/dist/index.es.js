var w=Object.defineProperty,b=Object.defineProperties;var B=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var f=Object.prototype.hasOwnProperty,P=Object.prototype.propertyIsEnumerable;var y=(e,o,t)=>o in e?w(e,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[o]=t,p=(e,o)=>{for(var t in o||(o={}))f.call(o,t)&&y(e,t,o[t]);if(a)for(var t of a(o))P.call(o,t)&&y(e,t,o[t]);return e},l=(e,o)=>b(e,B(o));var m=(e,o)=>{var t={};for(var i in e)f.call(e,i)&&o.indexOf(i)<0&&(t[i]=e[i]);if(e!=null&&a)for(var i of a(e))o.indexOf(i)<0&&P.call(e,i)&&(t[i]=e[i]);return t};import*as r from"react";import*as x from"prop-types";import{useUID as h}from"@twilio-paste/uid-library";import{Box as k,safelySpreadBoxProps as A}from"@twilio-paste/box";import{StyledBase as E}from"@twilio-paste/theme";import{Text as N}from"@twilio-paste/text";import{useTooltipPrimitiveState as z,TooltipPrimitive as C,TooltipPrimitiveReference as W}from"@twilio-paste/tooltip-primitive";import*as v from"react";import{TooltipPrimitiveArrow as I}from"@twilio-paste/tooltip-primitive";import{useTheme as g}from"@twilio-paste/theme";var d=e=>{let o=g();return v.createElement(I,l(p({},e),{size:o.fontSizes.fontSize50,stroke:o.borderColors.colorBorderInverseWeaker,fill:o.backgroundColors.colorBackgroundBodyInverse}))};d.displayName="TooltipArrow";var u=r.forwardRef((T,i)=>{var s=T,{style:e,element:o}=s,t=m(s,["style","element"]);return r.createElement(k,l(p({},A(t)),{backgroundColor:"colorBackgroundBodyInverse",borderColor:"colorBorderInverseWeaker",borderRadius:"borderRadius20",borderStyle:"solid",borderWidth:"borderWidth10",boxShadow:"shadow",element:o,maxWidth:"size30",padding:"space30",paddingBottom:"space20",paddingTop:"space20",zIndex:"zIndex90",_focus:{outline:"none"},style:e,ref:i}))});u.displayName="StyledTooltip";var D=r.forwardRef((L,R)=>{var c=L,{baseId:e,children:o,element:t="TOOLTIP",state:i,text:T}=c,s=m(c,["baseId","children","element","state","text"]);let n=i||z(p({baseId:`paste-tooltip-${h()}`},s));return r.createElement(r.Fragment,null,r.Children.only(r.createElement(W,p(l(p({},n),{ref:R}),o.props),S=>r.cloneElement(o,S))),r.createElement(C,l(p(p({element:t},n),s),{as:u}),r.createElement(E,null,r.createElement(d,p({},n)),r.createElement(N,{element:`${t}_TEXT`,as:"span",color:"colorTextInverse"},T))))});D.displayName="Tooltip";export{D as Tooltip,z as useTooltipState};
