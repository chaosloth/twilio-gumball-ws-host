var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// ../../node_modules/lodash.camelcase/index.js
var require_lodash = __commonJS({
  "../../node_modules/lodash.camelcase/index.js"(exports, module) {
    var INFINITY = 1 / 0;
    var symbolTag = "[object Symbol]";
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23";
    var rsComboSymbolsRange = "\\u20d0-\\u20f0";
    var rsDingbatRange = "\\u2700-\\u27bf";
    var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
    var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
    var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
    var rsPunctuationRange = "\\u2000-\\u206f";
    var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]";
    var rsAstral = "[" + rsAstralRange + "]";
    var rsBreak = "[" + rsBreakRange + "]";
    var rsCombo = "[" + rsComboMarksRange + rsComboSymbolsRange + "]";
    var rsDigits = "\\d+";
    var rsDingbat = "[" + rsDingbatRange + "]";
    var rsLower = "[" + rsLowerRange + "]";
    var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsUpper = "[" + rsUpperRange + "]";
    var rsZWJ = "\\u200d";
    var rsLowerMisc = "(?:" + rsLower + "|" + rsMisc + ")";
    var rsUpperMisc = "(?:" + rsUpper + "|" + rsMisc + ")";
    var rsOptLowerContr = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
    var rsOptUpperContr = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reApos = RegExp(rsApos, "g");
    var reComboMark = RegExp(rsCombo, "g");
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptLowerContr + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsUpperMisc + "+" + rsOptUpperContr + "(?=" + [rsBreak, rsUpper + rsLowerMisc, "$"].join("|") + ")",
      rsUpper + "?" + rsLowerMisc + "+" + rsOptLowerContr,
      rsUpper + "+" + rsOptUpperContr,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + "]");
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var deburredLetters = {
      "\xC0": "A",
      "\xC1": "A",
      "\xC2": "A",
      "\xC3": "A",
      "\xC4": "A",
      "\xC5": "A",
      "\xE0": "a",
      "\xE1": "a",
      "\xE2": "a",
      "\xE3": "a",
      "\xE4": "a",
      "\xE5": "a",
      "\xC7": "C",
      "\xE7": "c",
      "\xD0": "D",
      "\xF0": "d",
      "\xC8": "E",
      "\xC9": "E",
      "\xCA": "E",
      "\xCB": "E",
      "\xE8": "e",
      "\xE9": "e",
      "\xEA": "e",
      "\xEB": "e",
      "\xCC": "I",
      "\xCD": "I",
      "\xCE": "I",
      "\xCF": "I",
      "\xEC": "i",
      "\xED": "i",
      "\xEE": "i",
      "\xEF": "i",
      "\xD1": "N",
      "\xF1": "n",
      "\xD2": "O",
      "\xD3": "O",
      "\xD4": "O",
      "\xD5": "O",
      "\xD6": "O",
      "\xD8": "O",
      "\xF2": "o",
      "\xF3": "o",
      "\xF4": "o",
      "\xF5": "o",
      "\xF6": "o",
      "\xF8": "o",
      "\xD9": "U",
      "\xDA": "U",
      "\xDB": "U",
      "\xDC": "U",
      "\xF9": "u",
      "\xFA": "u",
      "\xFB": "u",
      "\xFC": "u",
      "\xDD": "Y",
      "\xFD": "y",
      "\xFF": "y",
      "\xC6": "Ae",
      "\xE6": "ae",
      "\xDE": "Th",
      "\xFE": "th",
      "\xDF": "ss",
      "\u0100": "A",
      "\u0102": "A",
      "\u0104": "A",
      "\u0101": "a",
      "\u0103": "a",
      "\u0105": "a",
      "\u0106": "C",
      "\u0108": "C",
      "\u010A": "C",
      "\u010C": "C",
      "\u0107": "c",
      "\u0109": "c",
      "\u010B": "c",
      "\u010D": "c",
      "\u010E": "D",
      "\u0110": "D",
      "\u010F": "d",
      "\u0111": "d",
      "\u0112": "E",
      "\u0114": "E",
      "\u0116": "E",
      "\u0118": "E",
      "\u011A": "E",
      "\u0113": "e",
      "\u0115": "e",
      "\u0117": "e",
      "\u0119": "e",
      "\u011B": "e",
      "\u011C": "G",
      "\u011E": "G",
      "\u0120": "G",
      "\u0122": "G",
      "\u011D": "g",
      "\u011F": "g",
      "\u0121": "g",
      "\u0123": "g",
      "\u0124": "H",
      "\u0126": "H",
      "\u0125": "h",
      "\u0127": "h",
      "\u0128": "I",
      "\u012A": "I",
      "\u012C": "I",
      "\u012E": "I",
      "\u0130": "I",
      "\u0129": "i",
      "\u012B": "i",
      "\u012D": "i",
      "\u012F": "i",
      "\u0131": "i",
      "\u0134": "J",
      "\u0135": "j",
      "\u0136": "K",
      "\u0137": "k",
      "\u0138": "k",
      "\u0139": "L",
      "\u013B": "L",
      "\u013D": "L",
      "\u013F": "L",
      "\u0141": "L",
      "\u013A": "l",
      "\u013C": "l",
      "\u013E": "l",
      "\u0140": "l",
      "\u0142": "l",
      "\u0143": "N",
      "\u0145": "N",
      "\u0147": "N",
      "\u014A": "N",
      "\u0144": "n",
      "\u0146": "n",
      "\u0148": "n",
      "\u014B": "n",
      "\u014C": "O",
      "\u014E": "O",
      "\u0150": "O",
      "\u014D": "o",
      "\u014F": "o",
      "\u0151": "o",
      "\u0154": "R",
      "\u0156": "R",
      "\u0158": "R",
      "\u0155": "r",
      "\u0157": "r",
      "\u0159": "r",
      "\u015A": "S",
      "\u015C": "S",
      "\u015E": "S",
      "\u0160": "S",
      "\u015B": "s",
      "\u015D": "s",
      "\u015F": "s",
      "\u0161": "s",
      "\u0162": "T",
      "\u0164": "T",
      "\u0166": "T",
      "\u0163": "t",
      "\u0165": "t",
      "\u0167": "t",
      "\u0168": "U",
      "\u016A": "U",
      "\u016C": "U",
      "\u016E": "U",
      "\u0170": "U",
      "\u0172": "U",
      "\u0169": "u",
      "\u016B": "u",
      "\u016D": "u",
      "\u016F": "u",
      "\u0171": "u",
      "\u0173": "u",
      "\u0174": "W",
      "\u0175": "w",
      "\u0176": "Y",
      "\u0177": "y",
      "\u0178": "Y",
      "\u0179": "Z",
      "\u017B": "Z",
      "\u017D": "Z",
      "\u017A": "z",
      "\u017C": "z",
      "\u017E": "z",
      "\u0132": "IJ",
      "\u0133": "ij",
      "\u0152": "Oe",
      "\u0153": "oe",
      "\u0149": "'n",
      "\u017F": "ss"
    };
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1, length = array ? array.length : 0;
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
    function asciiToArray(string2) {
      return string2.split("");
    }
    function asciiWords(string2) {
      return string2.match(reAsciiWord) || [];
    }
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? void 0 : object[key];
      };
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    function hasUnicode(string2) {
      return reHasUnicode.test(string2);
    }
    function hasUnicodeWord(string2) {
      return reHasUnicodeWord.test(string2);
    }
    function stringToArray(string2) {
      return hasUnicode(string2) ? unicodeToArray(string2) : asciiToArray(string2);
    }
    function unicodeToArray(string2) {
      return string2.match(reUnicode) || [];
    }
    function unicodeWords(string2) {
      return string2.match(reUnicodeWord) || [];
    }
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var Symbol = root.Symbol;
    var symbolProto = Symbol ? Symbol.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseSlice(array, start, end) {
      var index = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === void 0 ? length : end;
      return !start && end >= length ? array : baseSlice(array, start, end);
    }
    function createCaseFirst(methodName) {
      return function(string2) {
        string2 = toString(string2);
        var strSymbols = hasUnicode(string2) ? stringToArray(string2) : void 0;
        var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string2.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    function createCompounder(callback) {
      return function(string2) {
        return arrayReduce(words(deburr(string2).replace(reApos, "")), callback, "");
      };
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    var camelCase2 = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });
    function capitalize(string2) {
      return upperFirst(toString(string2).toLowerCase());
    }
    function deburr(string2) {
      string2 = toString(string2);
      return string2 && string2.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    var upperFirst = createCaseFirst("toUpperCase");
    function words(string2, pattern, guard) {
      string2 = toString(string2);
      pattern = guard ? void 0 : pattern;
      if (pattern === void 0) {
        return hasUnicodeWord(string2) ? unicodeWords(string2) : asciiWords(string2);
      }
      return string2.match(pattern) || [];
    }
    module.exports = camelCase2;
  }
});

// src/background.ts
var BACKGROUND_PROPS = [
  "background",
  "backgroundColor",
  "backgroundImage",
  "backgroundSize",
  "backgroundPosition",
  "backgroundRepeat",
  "backgroundAttachment"
];

// src/border.ts
var BORDER_RADIUS_PROPS = [
  "borderRadius",
  "borderBottomLeftRadius",
  "borderBottomRightRadius",
  "borderTopLeftRadius",
  "borderTopRightRadius"
];
var BORDER_WIDTH_PROPS = [
  "borderWidth",
  "borderBottomWidth",
  "borderLeftWidth",
  "borderRightWidth",
  "borderTopWidth"
];
var BORDER_COLOR_PROPS = [
  "borderColor",
  "borderBottomColor",
  "borderLeftColor",
  "borderRightColor",
  "borderTopColor"
];
var BORDER_STYLE_PROPS = [
  "borderStyle",
  "borderTopStyle",
  "borderRightStyle",
  "borderBottomStyle",
  "borderLeftStyle"
];
var BORDER_PROPS = [
  ...BORDER_RADIUS_PROPS,
  ...BORDER_WIDTH_PROPS,
  ...BORDER_COLOR_PROPS,
  ...BORDER_STYLE_PROPS,
  "border",
  "borderTop",
  "borderRight",
  "borderBottom",
  "borderLeft",
  "borderX",
  "borderY"
];

// src/flexbox.ts
var FLEXBOX_PROPS = [
  "alignContent",
  "alignItems",
  "alignSelf",
  "flex",
  "flexBasis",
  "flexDirection",
  "flexGrow",
  "flexShrink",
  "flexWrap",
  "justifyContent",
  "justifyItems",
  "justifySelf",
  "order"
];

// src/layout.ts
var OVERFLOW_PROPS = ["overflow", "overflowX", "overflowY"];
var LAYOUT_PROPS = [
  ...OVERFLOW_PROPS,
  "width",
  "minWidth",
  "maxWidth",
  "height",
  "minHeight",
  "maxHeight",
  "size",
  "display",
  "verticalAlign"
];

// src/position.ts
var POSITION_PROPS = ["position", "left", "right", "top", "bottom", "zIndex"];

// src/shadow.ts
var SHADOW_PROPS = ["boxShadow", "textShadow"];

// src/space.ts
var MARGIN_PROPS = [
  "margin",
  "m",
  "marginTop",
  "mt",
  "marginRight",
  "mr",
  "marginBottom",
  "mb",
  "marginLeft",
  "ml",
  "marginX",
  "mx",
  "marginY",
  "my"
];
var PADDING_PROPS = [
  "padding",
  "p",
  "paddingTop",
  "pt",
  "paddingRight",
  "pr",
  "paddingBottom",
  "pb",
  "paddingLeft",
  "pl",
  "paddingX",
  "px",
  "paddingY",
  "py"
];
var GAP_PROPS = ["columnGap", "rowGap"];
var SPACE_PROPS = [...MARGIN_PROPS, ...PADDING_PROPS, ...GAP_PROPS];

// src/typography.ts
var TYPOGRAPHY_PROPS = [
  "fontFamily",
  "fontSize",
  "fontStyle",
  "fontWeight",
  "letterSpacing",
  "lineHeight",
  "textAlign",
  "color",
  "textDecoration",
  "textOverflow",
  "textTransform",
  "whiteSpace",
  "wordBreak",
  "wordWrap",
  "overflowWrap"
];

// src/proptypes/background.ts
import { DefaultTheme } from "@twilio-paste/theme";

// src/proptypes/utils/propValidator.ts
var propValidator = (optionsList) => {
  return (props, propName, componentName) => {
    const suppliedValue = props[propName];
    const propError = new Error(`[${componentName}]: invalid prop supplied "${propName}=${suppliedValue}", expected a token value. See https://paste.twilio.design/tokens for available options.`);
    const isInvalidToken = (value) => !optionsList.includes(value);
    if (suppliedValue != null) {
      if (Array.isArray(suppliedValue)) {
        for (let i = 0; i < suppliedValue.length; i++) {
          if (isInvalidToken(suppliedValue[i])) {
            return propError;
          }
        }
      } else if (isInvalidToken(suppliedValue)) {
        return propError;
      }
    }
    return null;
  };
};

// src/constants.ts
import RawJSON from "@twilio-paste/design-tokens/dist/tokens.raw.json";
var camelCase = require_lodash();
var DEPRECATE_TOKENS = Object.values(RawJSON.props).filter((token) => token.deprecated).map((deprecatedToken) => camelCase(deprecatedToken.name));

// src/proptypes/background.ts
var BackgroundColorOptions = ["none", "transparent", ...Object.keys(DefaultTheme.backgroundColors)];
var isBackgroundColorTokenProp = propValidator(BackgroundColorOptions);
var isDeprecatedBackgroundColorTokenProp = (props) => {
  if (props.backgroundColor != null && DEPRECATE_TOKENS.indexOf(props.backgroundColor) > 0) {
    console.error(`Paste: "${props.backgroundColor}" is a deprecated design token. It will be removed in the 2021.11.16 release of Paste`);
  }
  return null;
};

// src/proptypes/border.ts
import { DefaultTheme as DefaultTheme2 } from "@twilio-paste/theme";
var BorderRadiusOptions = Object.keys(DefaultTheme2.radii);
var BorderWidthOptions = Object.keys(DefaultTheme2.borderWidths);
var BorderColorOptions = ["transparent", ...Object.keys(DefaultTheme2.borderColors)];
var isBorderRadiusTokenProp = propValidator(BorderRadiusOptions);
var isBorderWidthTokenProp = propValidator(BorderWidthOptions);
var isBorderColorTokenProp = propValidator(BorderColorOptions);
var isDeprecatedBorderColorTokenProp = (props) => {
  if (props.borderColor != null && DEPRECATE_TOKENS.indexOf(props.borderColor) > 0) {
    console.error(`Paste: "${props.borderColor}" is a deprecated design token. It will be removed in the 2021.11.16 release of Paste`);
  }
  return null;
};

// src/proptypes/layout.ts
import * as PropTypes2 from "prop-types";
import { DefaultTheme as DefaultTheme3 } from "@twilio-paste/theme";

// src/proptypes/utils/responsivePropValidator.ts
import * as PropTypes from "prop-types";
var ResponsiveProp = (type) => {
  return PropTypes.oneOfType([type, PropTypes.arrayOf(type)]);
};

// src/proptypes/layout.ts
var IconSizeOptions = Object.keys(DefaultTheme3.iconSizes);
var isWidthTokenProp = ResponsiveProp(PropTypes2.oneOfType([PropTypes2.string, PropTypes2.number]));
var isMinWidthTokenProp = ResponsiveProp(PropTypes2.oneOfType([PropTypes2.string, PropTypes2.number]));
var isMaxWidthTokenProp = ResponsiveProp(PropTypes2.oneOfType([PropTypes2.string, PropTypes2.number]));
var isHeightTokenProp = ResponsiveProp(PropTypes2.oneOfType([PropTypes2.string, PropTypes2.number]));
var isMinHeightTokenProp = ResponsiveProp(PropTypes2.oneOfType([PropTypes2.string, PropTypes2.number]));
var isMaxHeightTokenProp = ResponsiveProp(PropTypes2.oneOfType([PropTypes2.string, PropTypes2.number]));
var isIconSizeTokenProp = propValidator(IconSizeOptions);

// src/proptypes/position.ts
import { DefaultTheme as DefaultTheme4 } from "@twilio-paste/theme";
var ZIndexOptions = Object.keys(DefaultTheme4.zIndices);
var isZIndexTokenProp = propValidator(ZIndexOptions);

// src/proptypes/shadow.ts
import { DefaultTheme as DefaultTheme5 } from "@twilio-paste/theme";
var BoxShadowOptions = ["none", ...Object.keys(DefaultTheme5.shadows)];
var isBoxShadowTokenProp = propValidator(BoxShadowOptions);
var isDeprecatedBoxShadowTokenProp = (props) => {
  if (props.boxShadow != null && DEPRECATE_TOKENS.indexOf(props.boxShadow) > 0) {
    console.error(`Paste: "${props.boxShadow}" is a deprecated design token. It will be removed in the 2021.11.16 release of Paste`);
  }
  return null;
};

// src/proptypes/space.ts
import { DefaultTheme as DefaultTheme6 } from "@twilio-paste/theme";
var SpaceOptions = Object.keys(DefaultTheme6.space);
var MarginOptions = ["auto", ...Object.keys(DefaultTheme6.space)];
var isSpaceTokenProp = propValidator(SpaceOptions);
var isPaddingTokenProp = propValidator(SpaceOptions);
var isMarginTokenProp = propValidator(MarginOptions);
var isGapTokenProp = propValidator(SpaceOptions);

// src/proptypes/typography.ts
import { DefaultTheme as DefaultTheme7 } from "@twilio-paste/theme";
var FontFamilyOptions = ["inherit", ...Object.keys(DefaultTheme7.fonts)];
var FontSizeOptions = ["100%", "inherit", ...Object.keys(DefaultTheme7.fontSizes)];
var FontWeightOptions = ["inherit", ...Object.keys(DefaultTheme7.fontWeights)];
var LineHeightOptions = ["unset", "inherit", ...Object.keys(DefaultTheme7.lineHeights)];
var TextColorOptions = ["currentColor", "inherit", ...Object.keys(DefaultTheme7.textColors)];
var isFontFamilyTokenProp = propValidator(FontFamilyOptions);
var isFontSizeTokenProp = propValidator(FontSizeOptions);
var isFontWeightTokenProp = propValidator(FontWeightOptions);
var isLineHeightTokenProp = propValidator(LineHeightOptions);
var isTextColorTokenProp = propValidator(TextColorOptions);
var isDeprecatedTextColorTokenProp = (props) => {
  if (props.color != null && DEPRECATE_TOKENS.indexOf(props.color) > 0) {
    console.error(`Paste: "${props.color}" is a deprecated design token. It will be removed in the 2021.11.16 release of Paste`);
  }
  return null;
};

// src/proptypes/helpers.ts
import * as PropTypes3 from "prop-types";
var StyleResetProp = PropTypes3.oneOf(["none", "inherit", "initial", "unset"]);
export {
  BACKGROUND_PROPS,
  BORDER_COLOR_PROPS,
  BORDER_PROPS,
  BORDER_RADIUS_PROPS,
  BORDER_STYLE_PROPS,
  BORDER_WIDTH_PROPS,
  FLEXBOX_PROPS,
  GAP_PROPS,
  LAYOUT_PROPS,
  MARGIN_PROPS,
  OVERFLOW_PROPS,
  PADDING_PROPS,
  POSITION_PROPS,
  ResponsiveProp,
  SHADOW_PROPS,
  SPACE_PROPS,
  StyleResetProp,
  TYPOGRAPHY_PROPS,
  isBackgroundColorTokenProp,
  isBorderColorTokenProp,
  isBorderRadiusTokenProp,
  isBorderWidthTokenProp,
  isBoxShadowTokenProp,
  isDeprecatedBackgroundColorTokenProp,
  isDeprecatedBorderColorTokenProp,
  isDeprecatedBoxShadowTokenProp,
  isDeprecatedTextColorTokenProp,
  isFontFamilyTokenProp,
  isFontSizeTokenProp,
  isFontWeightTokenProp,
  isGapTokenProp,
  isHeightTokenProp,
  isIconSizeTokenProp,
  isLineHeightTokenProp,
  isMarginTokenProp,
  isMaxHeightTokenProp,
  isMaxWidthTokenProp,
  isMinHeightTokenProp,
  isMinWidthTokenProp,
  isPaddingTokenProp,
  isSpaceTokenProp,
  isTextColorTokenProp,
  isWidthTokenProp,
  isZIndexTokenProp
};
