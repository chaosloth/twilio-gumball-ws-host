var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/FormPill.tsx
import * as React2 from "react";
import { Box as Box2, safelySpreadBoxProps } from "@twilio-paste/box";
import { CompositeItem } from "@twilio-paste/reakit-library";

// src/PillCloseIcon.tsx
import * as React from "react";
import { Box } from "@twilio-paste/box";
import { CloseIcon } from "@twilio-paste/icons/esm/CloseIcon";
var PillCloseIcon = ({ onClick }) => {
  return /* @__PURE__ */ React.createElement(Box, {
    onClick,
    _hover: {
      cursor: "pointer"
    }
  }, /* @__PURE__ */ React.createElement(CloseIcon, {
    decorative: true,
    size: "sizeIcon10"
  }));
};

// src/FormPill.tsx
var hoverStyles = {
  cursor: "pointer",
  _hover: {
    backgroundColor: "colorBackgroundPrimaryWeakest",
    boxShadow: "shadowBorderPrimaryStrong",
    color: "colorTextLinkStronger"
  },
  _selected_hover: {
    backgroundColor: "colorBackgroundPrimaryStronger",
    color: "colorTextWeakest"
  }
};
var FormPillStyles = React2.forwardRef((_a, ref) => {
  var _b = _a, { element = "FORM_PILL", selected = false, isHoverable } = _b, props = __objRest(_b, ["element", "selected", "isHoverable"]);
  return /* @__PURE__ */ React2.createElement(Box2, __spreadValues(__spreadProps(__spreadValues({}, safelySpreadBoxProps(props)), {
    ref,
    element,
    as: "button",
    "aria-selected": selected,
    role: "option",
    type: "button",
    alignItems: "center",
    backgroundColor: "colorBackgroundStrong",
    borderRadius: "borderRadius10",
    borderWidth: "borderWidth0",
    color: "colorText",
    columnGap: "space20",
    cursor: "default",
    display: "flex",
    fontFamily: "inherit",
    fontSize: "fontSize20",
    fontWeight: "fontWeightSemibold",
    lineHeight: "lineHeight10",
    outline: "none",
    paddingX: "space30",
    paddingY: "space20",
    transition: "background-color 100ms ease-in, box-shadow 100ms ease-in, color 100ms ease-in, border-color 100ms ease-in",
    _focusVisible: {
      backgroundColor: "colorBackgroundPrimaryWeakest",
      boxShadow: "shadowFocus",
      color: "colorTextLinkStronger"
    },
    _selected: {
      backgroundColor: "colorBackgroundPrimaryStronger",
      color: "colorTextWeakest"
    }
  }), isHoverable && __spreadValues({}, hoverStyles)), props.children);
});
FormPillStyles.displayName = "StyledFormPill";
var FormPill = React2.forwardRef((_a, ref) => {
  var _b = _a, { element = "FORM_PILL", onDismiss, onSelect, next } = _b, props = __objRest(_b, ["element", "onDismiss", "onSelect", "next"]);
  const handleKeydown = React2.useCallback((event) => {
    if ((event.key === "Backspace" || event.key === "Delete") && typeof onDismiss === "function") {
      onDismiss();
      if (typeof next === "function") {
        next();
      }
    }
  }, [onDismiss, next]);
  const isHoverable = onSelect != null;
  return /* @__PURE__ */ React2.createElement(CompositeItem, __spreadProps(__spreadValues({
    as: FormPillStyles,
    element
  }, props), {
    ref,
    isHoverable,
    onKeyDown: handleKeydown,
    onClick: onSelect,
    next
  }), props.children, onDismiss != null ? /* @__PURE__ */ React2.createElement(PillCloseIcon, {
    onClick: onDismiss
  }) : null);
});
FormPill.displayName = "FormPill";

// src/FormPillGroup.tsx
import * as React3 from "react";
import { Box as Box3, safelySpreadBoxProps as safelySpreadBoxProps2 } from "@twilio-paste/box";
import { ScreenReaderOnly } from "@twilio-paste/screen-reader-only";
import { useUID } from "@twilio-paste/uid-library";
import { Composite } from "@twilio-paste/reakit-library";
var FormPillGroupStyles = React3.forwardRef((_a, ref) => {
  var _b = _a, { element = "FORM_PILL_GROUP" } = _b, props = __objRest(_b, ["element"]);
  return /* @__PURE__ */ React3.createElement(Box3, __spreadProps(__spreadValues({}, safelySpreadBoxProps2(props)), {
    element,
    ref,
    role: "listbox",
    margin: "space0",
    padding: "space0",
    display: "flex",
    flexWrap: "wrap",
    rowGap: "space30",
    columnGap: "space30"
  }), props.children);
});
FormPillGroupStyles.displayName = "StyledFormPillGroup";
var FormPillGroup = React3.forwardRef((_a, ref) => {
  var _b = _a, { i18nKeyboardControls = "Press Delete or Backspace to remove. Press Enter to toggle selection." } = _b, props = __objRest(_b, ["i18nKeyboardControls"]);
  const keyboardControlsId = useUID();
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(Composite, __spreadProps(__spreadValues({
    as: FormPillGroupStyles
  }, props), {
    ref,
    "aria-describedby": keyboardControlsId
  }), props.children), /* @__PURE__ */ React3.createElement(ScreenReaderOnly, {
    id: keyboardControlsId
  }, i18nKeyboardControls));
});
FormPillGroup.displayName = "FormPillGroup";

// src/useFormPillState.tsx
import { useCompositeState } from "@twilio-paste/reakit-library";
var useFormPillState = (config = {}) => {
  return __spreadValues({}, useCompositeState(__spreadProps(__spreadValues({}, config), {
    orientation: "horizontal",
    loop: true
  })));
};
export {
  FormPill,
  FormPillGroup,
  useFormPillState
};
