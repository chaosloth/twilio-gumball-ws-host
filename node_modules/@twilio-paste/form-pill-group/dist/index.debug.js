var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  FormPill: () => FormPill,
  FormPillGroup: () => FormPillGroup,
  useFormPillState: () => useFormPillState
});

// src/FormPill.tsx
var React2 = __toESM(require("react"));
var import_box2 = require("@twilio-paste/box");
var import_reakit_library = require("@twilio-paste/reakit-library");

// src/PillCloseIcon.tsx
var React = __toESM(require("react"));
var import_box = require("@twilio-paste/box");
var import_CloseIcon = require("@twilio-paste/icons/cjs/CloseIcon");
var PillCloseIcon = ({ onClick }) => {
  return /* @__PURE__ */ React.createElement(import_box.Box, {
    onClick,
    _hover: {
      cursor: "pointer"
    }
  }, /* @__PURE__ */ React.createElement(import_CloseIcon.CloseIcon, {
    decorative: true,
    size: "sizeIcon10"
  }));
};

// src/FormPill.tsx
var hoverStyles = {
  cursor: "pointer",
  _hover: {
    backgroundColor: "colorBackgroundPrimaryWeakest",
    boxShadow: "shadowBorderPrimaryStrong",
    color: "colorTextLinkStronger"
  },
  _selected_hover: {
    backgroundColor: "colorBackgroundPrimaryStronger",
    color: "colorTextWeakest"
  }
};
var FormPillStyles = React2.forwardRef((_a, ref) => {
  var _b = _a, { element = "FORM_PILL", selected = false, isHoverable } = _b, props = __objRest(_b, ["element", "selected", "isHoverable"]);
  return /* @__PURE__ */ React2.createElement(import_box2.Box, __spreadValues(__spreadProps(__spreadValues({}, (0, import_box2.safelySpreadBoxProps)(props)), {
    ref,
    element,
    as: "button",
    "aria-selected": selected,
    role: "option",
    type: "button",
    alignItems: "center",
    backgroundColor: "colorBackgroundStrong",
    borderRadius: "borderRadius10",
    borderWidth: "borderWidth0",
    color: "colorText",
    columnGap: "space20",
    cursor: "default",
    display: "flex",
    fontFamily: "inherit",
    fontSize: "fontSize20",
    fontWeight: "fontWeightSemibold",
    lineHeight: "lineHeight10",
    outline: "none",
    paddingX: "space30",
    paddingY: "space20",
    transition: "background-color 100ms ease-in, box-shadow 100ms ease-in, color 100ms ease-in, border-color 100ms ease-in",
    _focusVisible: {
      backgroundColor: "colorBackgroundPrimaryWeakest",
      boxShadow: "shadowFocus",
      color: "colorTextLinkStronger"
    },
    _selected: {
      backgroundColor: "colorBackgroundPrimaryStronger",
      color: "colorTextWeakest"
    }
  }), isHoverable && __spreadValues({}, hoverStyles)), props.children);
});
FormPillStyles.displayName = "StyledFormPill";
var FormPill = React2.forwardRef((_a, ref) => {
  var _b = _a, { element = "FORM_PILL", onDismiss, onSelect, next } = _b, props = __objRest(_b, ["element", "onDismiss", "onSelect", "next"]);
  const handleKeydown = React2.useCallback((event) => {
    if ((event.key === "Backspace" || event.key === "Delete") && typeof onDismiss === "function") {
      onDismiss();
      if (typeof next === "function") {
        next();
      }
    }
  }, [onDismiss, next]);
  const isHoverable = onSelect != null;
  return /* @__PURE__ */ React2.createElement(import_reakit_library.CompositeItem, __spreadProps(__spreadValues({
    as: FormPillStyles,
    element
  }, props), {
    ref,
    isHoverable,
    onKeyDown: handleKeydown,
    onClick: onSelect,
    next
  }), props.children, onDismiss != null ? /* @__PURE__ */ React2.createElement(PillCloseIcon, {
    onClick: onDismiss
  }) : null);
});
FormPill.displayName = "FormPill";

// src/FormPillGroup.tsx
var React3 = __toESM(require("react"));
var import_box3 = require("@twilio-paste/box");
var import_screen_reader_only = require("@twilio-paste/screen-reader-only");
var import_uid_library = require("@twilio-paste/uid-library");
var import_reakit_library2 = require("@twilio-paste/reakit-library");
var FormPillGroupStyles = React3.forwardRef((_a, ref) => {
  var _b = _a, { element = "FORM_PILL_GROUP" } = _b, props = __objRest(_b, ["element"]);
  return /* @__PURE__ */ React3.createElement(import_box3.Box, __spreadProps(__spreadValues({}, (0, import_box3.safelySpreadBoxProps)(props)), {
    element,
    ref,
    role: "listbox",
    margin: "space0",
    padding: "space0",
    display: "flex",
    flexWrap: "wrap",
    rowGap: "space30",
    columnGap: "space30"
  }), props.children);
});
FormPillGroupStyles.displayName = "StyledFormPillGroup";
var FormPillGroup = React3.forwardRef((_a, ref) => {
  var _b = _a, { i18nKeyboardControls = "Press Delete or Backspace to remove. Press Enter to toggle selection." } = _b, props = __objRest(_b, ["i18nKeyboardControls"]);
  const keyboardControlsId = (0, import_uid_library.useUID)();
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(import_reakit_library2.Composite, __spreadProps(__spreadValues({
    as: FormPillGroupStyles
  }, props), {
    ref,
    "aria-describedby": keyboardControlsId
  }), props.children), /* @__PURE__ */ React3.createElement(import_screen_reader_only.ScreenReaderOnly, {
    id: keyboardControlsId
  }, i18nKeyboardControls));
});
FormPillGroup.displayName = "FormPillGroup";

// src/useFormPillState.tsx
var import_reakit_library3 = require("@twilio-paste/reakit-library");
var useFormPillState = (config = {}) => {
  return __spreadValues({}, (0, import_reakit_library3.useCompositeState)(__spreadProps(__spreadValues({}, config), {
    orientation: "horizontal",
    loop: true
  })));
};
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FormPill,
  FormPillGroup,
  useFormPillState
});
