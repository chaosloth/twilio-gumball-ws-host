var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  SiblingBox: () => SiblingBox
});
var React = __toESM(require("react"));
var PropTypes = __toESM(require("prop-types"));
var import_styling_library = require("@twilio-paste/styling-library");
var import_box = require("@twilio-paste/box");
var StyledSiblingBox = (0, import_styling_library.styled)(import_box.Box)(({
  _activeSibling,
  _boxChild,
  _checkedAndActiveSibling,
  _checkedAndDisabledSibling,
  _checkedAndFocusSibling,
  _checkedAndHoverSibling,
  _checkedAndInvalidSibling,
  _checkedAndInvalidAndHoverSibling,
  _checkedSibling,
  _checkedSiblingAndBoxChild,
  _disabledSibling,
  _focusSibling,
  _hoverSibling,
  _invalidSibling,
  _invalidAndHoverSibling,
  type = "checkbox"
}) => {
  const active = `input[type=${type}]:active + label &`;
  const checked = `input[type=${type}]:checked + label &, input[type=${type}][aria-checked=mixed] + label &`;
  const checkedAndActive = `input[type=${type}]:checked:active + label &, input[type=${type}][aria-checked=mixed]:active + label &`;
  const checkedAndChild = `input[type=${type}]:checked + label & > *, input[type=${type}][aria-checked=mixed] + label & > *`;
  const checkedAndDisabled = `input[type=${type}]:checked:disabled + label &, input[type=${type}][aria-checked=mixed]:disabled + label &`;
  const checkedAndFocus = `input[type=${type}]:checked:focus + label &, input[type=${type}][aria-checked=mixed]:focus + label &`;
  const checkedAndHover = `input[type=${type}]:checked:hover:not(:disabled) + label &, input[type=${type}][aria-checked=mixed]:hover:not(:disabled) + label &`;
  const checkedAndInvalid = `input[type=${type}][aria-invalid=true]:checked + label &`;
  const checkedAndInvalidAndHover = `input[type=${type}][aria-invalid=true]:checked:hover:not(:disabled) + label &`;
  const child = `input[type=${type}] + label & > *`;
  const disabled = `input[type=${type}]:disabled + label &`;
  const focus = `input[type=${type}]:focus + label &`;
  const hover = `input[type=${type}]:hover:not(:disabled):not(:checked) + label &`;
  const invalid = `input[type=${type}][aria-invalid=true] + label &`;
  const invalidAndHover = `input[type=${type}][aria-invalid=true]:hover:not(:disabled) + label &`;
  return (0, import_styling_library.css)({
    [active]: _activeSibling,
    [checked]: _checkedSibling,
    [checkedAndActive]: _checkedAndActiveSibling,
    [checkedAndChild]: _checkedSiblingAndBoxChild,
    [checkedAndDisabled]: _checkedAndDisabledSibling,
    [checkedAndFocus]: _checkedAndFocusSibling,
    [checkedAndHover]: _checkedAndHoverSibling,
    [checkedAndInvalid]: _checkedAndInvalidSibling,
    [checkedAndInvalidAndHover]: _checkedAndInvalidAndHoverSibling,
    [child]: _boxChild,
    [disabled]: _disabledSibling,
    [focus]: _focusSibling,
    [hover]: _hoverSibling,
    [invalid]: _invalidSibling,
    [invalidAndHover]: _invalidAndHoverSibling
  });
});
var SiblingBox = (_a) => {
  var _b = _a, {
    "aria-hidden": ariaHidden = "true",
    alignItems = "center",
    display = "inline-flex",
    element = "SIBLING_BOX",
    flexShrink = 0,
    justifyContent = "center",
    transition = "all 120ms"
  } = _b, props = __objRest(_b, [
    "aria-hidden",
    "alignItems",
    "display",
    "element",
    "flexShrink",
    "justifyContent",
    "transition"
  ]);
  return /* @__PURE__ */ React.createElement(StyledSiblingBox, __spreadValues({
    alignItems,
    "aria-hidden": ariaHidden,
    display,
    element,
    flexShrink,
    justifyContent,
    transition
  }, props));
};
SiblingBox.displayName = "SiblingBox";
SiblingBox.propTypes = {
  type: PropTypes.oneOf(["checkbox", "radio"])
};
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SiblingBox
});
