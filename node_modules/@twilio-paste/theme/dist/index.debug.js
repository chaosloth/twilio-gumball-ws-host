var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  ConsoleTheme: () => ConsoleTheme,
  DarkTheme: () => DarkTheme,
  DefaultTheme: () => DefaultTheme,
  SendGridTheme: () => SendGridTheme,
  StyledBase: () => StyledBase,
  Theme: () => Theme,
  ThemeVariants: () => ThemeVariants,
  generateThemeFromTokens: () => generateThemeFromTokens,
  generateTokensFromTheme: () => generateTokensFromTheme,
  pasteBaseStyles: () => pasteBaseStyles,
  pasteFonts: () => pasteFonts,
  pasteGlobalStyles: () => pasteGlobalStyles,
  remToPx: () => remToPx,
  useTheme: () => useTheme,
  useThemeContrastCheck: () => useThemeContrastCheck,
  withTheme: () => import_styling_library6.withTheme
});

// src/themeProvider.tsx
var React = __toESM(require("react"));
var import_animation_library = require("@twilio-paste/animation-library");
var import_styling_library4 = require("@twilio-paste/styling-library");

// src/themes/default/index.ts
var import_design_tokens = require("@twilio-paste/design-tokens");

// src/generateThemeFromTokens.ts
var generateThemeFromTokens = ({
  backgroundColors: backgroundColors4,
  borderColors: borderColors4,
  borderWidths: borderWidths4,
  radii: radii4,
  fonts: fonts4,
  fontSizes: fontSizes4,
  fontWeights: fontWeights4,
  lineHeights: lineHeights4,
  boxShadows: boxShadows4,
  sizings: sizings4,
  spacings: spacings4,
  textColors: textColors4,
  zIndices: zIndices4,
  colors: colors4
}) => {
  const breakpoints = [sizings4.size40, sizings4.size100, sizings4.size120];
  const dataVisualization = Object.keys(colors4).filter((colorToken) => {
    return colorToken.includes("DataVisualization");
  }).reduce((obj, key) => __spreadProps(__spreadValues({}, obj), {
    [key]: colors4[key]
  }), {});
  return {
    shadows: boxShadows4,
    borderWidths: borderWidths4,
    radii: radii4,
    breakpoints,
    textColors: textColors4,
    borderColors: borderColors4,
    backgroundColors: backgroundColors4,
    fonts: fonts4,
    fontSizes: fontSizes4,
    fontWeights: fontWeights4,
    lineHeights: lineHeights4,
    widths: sizings4,
    maxWidths: sizings4,
    minWidths: sizings4,
    heights: sizings4,
    maxHeights: sizings4,
    minHeights: sizings4,
    sizes: sizings4,
    iconSizes: {
      sizeIcon10: sizings4.sizeIcon10,
      sizeIcon20: sizings4.sizeIcon20,
      sizeIcon30: sizings4.sizeIcon30,
      sizeIcon40: sizings4.sizeIcon40,
      sizeIcon50: sizings4.sizeIcon50,
      sizeIcon60: sizings4.sizeIcon60,
      sizeIcon70: sizings4.sizeIcon70,
      sizeIcon80: sizings4.sizeIcon80,
      sizeIcon90: sizings4.sizeIcon90,
      sizeIcon100: sizings4.sizeIcon100,
      sizeIcon110: sizings4.sizeIcon110
    },
    space: spacings4,
    zIndices: zIndices4,
    dataVisualization
  };
};

// src/themes/default/index.ts
var DefaultTheme = generateThemeFromTokens({
  backgroundColors: import_design_tokens.backgroundColors,
  borderColors: import_design_tokens.borderColors,
  borderWidths: import_design_tokens.borderWidths,
  radii: import_design_tokens.radii,
  fonts: import_design_tokens.fonts,
  fontSizes: import_design_tokens.fontSizes,
  fontWeights: import_design_tokens.fontWeights,
  lineHeights: import_design_tokens.lineHeights,
  boxShadows: import_design_tokens.boxShadows,
  sizings: import_design_tokens.sizings,
  spacings: import_design_tokens.spacings,
  textColors: import_design_tokens.textColors,
  zIndices: import_design_tokens.zIndices,
  colors: import_design_tokens.colors
});

// src/themes/sendgrid/index.ts
var import_tokens = require("@twilio-paste/design-tokens/dist/themes/sendgrid/tokens.common");
var SendGridTheme = generateThemeFromTokens({
  backgroundColors: import_tokens.backgroundColors,
  borderColors: import_tokens.borderColors,
  borderWidths: import_tokens.borderWidths,
  radii: import_tokens.radii,
  fonts: import_tokens.fonts,
  fontSizes: import_tokens.fontSizes,
  fontWeights: import_tokens.fontWeights,
  lineHeights: import_tokens.lineHeights,
  boxShadows: import_tokens.boxShadows,
  sizings: import_tokens.sizings,
  spacings: import_tokens.spacings,
  textColors: import_tokens.textColors,
  zIndices: import_tokens.zIndices,
  colors: import_tokens.colors
});

// src/themes/dark/index.ts
var import_tokens2 = require("@twilio-paste/design-tokens/dist/themes/dark/tokens.common");
var DarkTheme = generateThemeFromTokens({
  backgroundColors: import_tokens2.backgroundColors,
  borderColors: import_tokens2.borderColors,
  borderWidths: import_tokens2.borderWidths,
  radii: import_tokens2.radii,
  fonts: import_tokens2.fonts,
  fontSizes: import_tokens2.fontSizes,
  fontWeights: import_tokens2.fontWeights,
  lineHeights: import_tokens2.lineHeights,
  boxShadows: import_tokens2.boxShadows,
  sizings: import_tokens2.sizings,
  spacings: import_tokens2.spacings,
  textColors: import_tokens2.textColors,
  zIndices: import_tokens2.zIndices,
  colors: import_tokens2.colors
});

// src/themes/index.ts
var ConsoleTheme = DefaultTheme;

// src/styles/global.ts
var import_styling_library = require("@twilio-paste/styling-library");
var pasteGlobalStyles = (0, import_styling_library.css)({
  html: {
    fontSize: "100%",
    fontFamily: "fontFamilyText"
  },
  "html:lang(ja), html:lang(ja-JP)": {
    ".paste-theme-provider": {
      fontFamily: "fontFamilyTextJapanese"
    }
  },
  "html:lang(zh-CN)": {
    ".paste-theme-provider": {
      fontFamily: "fontFamilyTextChineseSimplified"
    }
  },
  "html:lang(zh-TW), html:lang(zh-HK)": {
    ".paste-theme-provider": {
      fontFamily: "fontFamilyTextChineseTraditional"
    }
  },
  "html:lang(ko)": {
    ".paste-theme-provider": {
      fontFamily: "fontFamilyTextKorean"
    }
  },
  body: {
    backgroundColor: "colorBackgroundBody",
    margin: 0,
    fontSize: "fontSize30"
  },
  "*, *::after, *::before": {
    boxSizing: "border-box"
  },
  "@media (prefers-reduced-motion: reduce)": {
    "*": {
      animationDuration: "0 !important",
      animationIterationCount: "1 !important",
      transitionDuration: "0 !important",
      scrollBehavior: "auto !important"
    }
  },
  ":root": {
    ["--reach-dialog"]: "1"
  }
});

// src/styles/base.ts
var import_styling_library2 = require("@twilio-paste/styling-library");
var pasteBaseStyles = (0, import_styling_library2.css)({
  color: "colorText",
  fontSize: "fontSize30",
  fontFamily: "fontFamilyText",
  lineHeight: "lineHeight30",
  fontWeight: "fontWeightNormal",
  fontVariantNumeric: "tabular-nums"
});

// src/styles/fonts.ts
var import_styling_library3 = require("@twilio-paste/styling-library");
var pasteFonts = import_styling_library3.EmotionCSS`
/* -------------------------------------------------------
Variable font.
*/
@font-face {
  font-family: 'Inter var';
  font-weight: 100 900;
  font-display: swap;
  font-style: normal;
  font-named-instance: 'Regular';
  src: url("https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/Inter-roman.var.woff2?v=3.15") format("woff2");
}
@font-face {
  font-family: 'Inter var';
  font-weight: 100 900;
  font-display: swap;
  font-style: italic;
  font-named-instance: 'Italic';
  src: url("https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/Inter-italic.var.woff2?v=3.15") format("woff2");
}
/* --------------------------------------------------------------------------
[EXPERIMENTAL] Multi-axis, single variable font.

Slant axis is not yet widely supported (as of February 2019) and thus this
multi-axis single variable font is opt-in rather than the default.

When using this, you will probably need to set font-variation-settings
explicitly, e.g.

  * { font-variation-settings: "slnt" 0deg }
  .italic { font-variation-settings: "slnt" 10deg }

*/
@font-face {
  font-family: 'Inter var experimental';
  font-weight: 100 900;
  font-display: swap;
  font-style: oblique 0deg 8deg;
  src: url("https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/Inter.var.woff2?v=3.15") format("woff2");
}

/*
Fira Mono
*/
@font-face {
  font-family: 'Fira Mono';
  font-style: normal;
  font-display: swap;
  font-weight: 400;
  src: local(''),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-regular.woff2') format('woff2'),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-regular.woff') format('woff');
}
@font-face {
  font-family: 'Fira Mono';
  font-style: normal;
  font-display: swap;
  font-weight: 700;
  src: local(''),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-700.woff2') format('woff2'),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-700.woff') format('woff');
}
@font-face {
  font-family: 'Fira Mono';
  font-style: normal;
  font-display: swap;
  font-weight: 500;
  src: local(''),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-500.woff2') format('woff2'),
       url('https://assets.twilio.com/public_assets/paste-fonts/main-1.2.0/fira-mono-v9-latin-ext_latin_greek-ext_greek_cyrillic-ext_cyrillic-500.woff') format('woff');
}
`;

// src/constants.ts
var ThemeVariants = {
  DEFAULT: "default",
  SENDGRID: "sendgrid",
  FLEX: "flex",
  DARK: "dark"
};
var DeprecatedThemeVariants = {
  CONSOLE: "console"
};

// src/utils/isDeprecatedTheme.ts
var isDeprecatedTheme = (theme) => {
  const themeToDeprecationMessage = {
    console: "It was removed in the 2022.02.04 release of Paste."
  };
  console.error(`Paste: ${theme} is a deprecated theme. ${themeToDeprecationMessage[theme]}`);
  return null;
};

// src/themeProvider.tsx
var StyledBase = import_styling_library4.styled.div(pasteBaseStyles);
function getProviderThemeProps(theme, customBreakpoints) {
  switch (theme) {
    case ThemeVariants.DARK:
      return __spreadProps(__spreadValues({}, DarkTheme), {
        breakpoints: customBreakpoints || DarkTheme.breakpoints
      });
    case ThemeVariants.SENDGRID:
      return __spreadProps(__spreadValues({}, SendGridTheme), {
        breakpoints: customBreakpoints || SendGridTheme.breakpoints
      });
    case DeprecatedThemeVariants.CONSOLE:
      isDeprecatedTheme(DeprecatedThemeVariants.CONSOLE);
      return __spreadProps(__spreadValues({}, DefaultTheme), {
        breakpoints: customBreakpoints || DefaultTheme.breakpoints
      });
    case ThemeVariants.FLEX:
    case ThemeVariants.DEFAULT:
    default:
      return __spreadProps(__spreadValues({}, DefaultTheme), {
        breakpoints: customBreakpoints || DefaultTheme.breakpoints
      });
  }
}
var ThemeProvider = (_a) => {
  var _b = _a, {
    customBreakpoints,
    theme = ThemeVariants.DEFAULT,
    disableAnimations = false
  } = _b, props = __objRest(_b, [
    "customBreakpoints",
    "theme",
    "disableAnimations"
  ]);
  const prefersReducedMotion = (0, import_animation_library.useReducedMotion)();
  React.useMemo(() => {
    import_animation_library.Globals.assign({
      skipAnimation: disableAnimations || prefersReducedMotion
    });
  }, [disableAnimations, prefersReducedMotion]);
  const providerThemeProps = getProviderThemeProps(theme, customBreakpoints);
  return /* @__PURE__ */ React.createElement(import_styling_library4.ThemeProvider, {
    theme: providerThemeProps
  }, /* @__PURE__ */ React.createElement(import_styling_library4.StylingGlobals, {
    styles: pasteGlobalStyles({ theme: providerThemeProps })
  }), /* @__PURE__ */ React.createElement(import_styling_library4.StylingGlobals, {
    styles: pasteFonts
  }), /* @__PURE__ */ React.createElement(StyledBase, __spreadValues({
    className: "paste-theme-provider"
  }, props)));
};

// src/themeConsumer.tsx
var React2 = __toESM(require("react"));
var import_styling_library5 = require("@twilio-paste/styling-library");
var ThemeConsumer = (_a) => {
  var _b = _a, { children } = _b, props = __objRest(_b, ["children"]);
  if (children == null || typeof children !== "function") {
    throw new Error("[ThemeConsumer]: You must pass a function as children");
  }
  return /* @__PURE__ */ React2.createElement(import_styling_library5.ThemeContext.Consumer, null, (theme) => {
    const newTheme = theme;
    return children(__spreadProps(__spreadValues({}, props), { theme: newTheme }));
  });
};

// src/withTheme.ts
var import_styling_library6 = require("@twilio-paste/styling-library");

// src/useTheme.tsx
var React3 = __toESM(require("react"));
var import_styling_library7 = require("@twilio-paste/styling-library");
var useTheme = () => {
  const context = React3.useContext(import_styling_library7.ThemeContext);
  if (!context) {
    throw new Error("[useHook]: must be used within the @twilio-paste/theme provider");
  }
  return context;
};

// src/generateTokensFromTheme.ts
var generateTokensFromTheme = ({
  backgroundColors: backgroundColors4,
  borderColors: borderColors4,
  borderWidths: borderWidths4,
  radii: radii4,
  fonts: fonts4,
  fontSizes: fontSizes4,
  fontWeights: fontWeights4,
  lineHeights: lineHeights4,
  shadows,
  sizes,
  space,
  textColors: textColors4,
  zIndices: zIndices4,
  dataVisualization
}) => {
  return {
    boxShadows: shadows,
    borderWidths: borderWidths4,
    radii: radii4,
    textColors: textColors4,
    borderColors: borderColors4,
    backgroundColors: backgroundColors4,
    fonts: fonts4,
    fontSizes: fontSizes4,
    fontWeights: fontWeights4,
    lineHeights: lineHeights4,
    sizings: sizes,
    spacings: space,
    zIndices: zIndices4,
    colors: dataVisualization
  };
};

// src/utils/remToPx.ts
var PX_PER_REM = 16;
var remToPx = (rem, type = "number") => {
  const remValue = typeof rem === "string" ? Number.parseFloat(rem.replace("rem", "")) : rem;
  const pxValue = Math.round(remValue * PX_PER_REM);
  return type === "number" ? pxValue : `${pxValue}px`;
};

// src/useThemeContrastCheck.ts
var import_color_contrast_utils = require("@twilio-paste/color-contrast-utils");
var useThemeContrastCheck = () => {
  const theme = useTheme();
  const designTokens = generateTokensFromTheme(theme);
  const textContrastRating = (0, import_color_contrast_utils.getContrastRatingsOfTokensWithTextContrastRequirements)(designTokens);
  const uiControlContrastRating = (0, import_color_contrast_utils.getContrastRatingsOfTokensWithUIControlContrastRequirements)(designTokens);
  const numberOfTextFailures = (0, import_color_contrast_utils.getNumberOfTextFailures)(textContrastRating);
  const numberOfUIControlFailures = (0, import_color_contrast_utils.getNumberOfUIControlFailures)(uiControlContrastRating);
  const totalFailures = numberOfTextFailures + numberOfUIControlFailures;
  return {
    textContrastRating,
    uiControlContrastRating,
    numberOfTextFailures,
    numberOfUIControlFailures,
    totalFailures
  };
};

// src/index.tsx
var Theme = {
  Provider: ThemeProvider,
  Consumer: ThemeConsumer
};
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ConsoleTheme,
  DarkTheme,
  DefaultTheme,
  SendGridTheme,
  StyledBase,
  Theme,
  ThemeVariants,
  generateThemeFromTokens,
  generateTokensFromTheme,
  pasteBaseStyles,
  pasteFonts,
  pasteGlobalStyles,
  remToPx,
  useTheme,
  useThemeContrastCheck,
  withTheme
});
