[{"/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/index.tsx":"1","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/reportWebVitals.ts":"2","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/App.tsx":"3","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/UserContext.tsx":"4","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/components/Loading.tsx":"5","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/Channels.tsx":"6","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/Sending.tsx":"7","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/Validating.tsx":"8","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/OCR.tsx":"9","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/Incorrect.tsx":"10","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/Dispense.tsx":"11","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/IndexPage.tsx":"12","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/Error.tsx":"13","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/HandwritingCanvas.js":"14"},{"size":1730,"mtime":1651031715485,"results":"15","hashOfConfig":"16"},{"size":545,"mtime":1651013989255,"results":"17","hashOfConfig":"16"},{"size":4732,"mtime":1651025977359,"results":"18","hashOfConfig":"16"},{"size":356,"mtime":1651013989248,"results":"19","hashOfConfig":"16"},{"size":276,"mtime":1651013989249,"results":"20","hashOfConfig":"16"},{"size":3846,"mtime":1651032065941,"results":"21","hashOfConfig":"16"},{"size":2342,"mtime":1651033369508,"results":"22","hashOfConfig":"16"},{"size":1902,"mtime":1651036230888,"results":"23","hashOfConfig":"16"},{"size":4391,"mtime":1651035012684,"results":"24","hashOfConfig":"16"},{"size":2004,"mtime":1651035628615,"results":"25","hashOfConfig":"16"},{"size":1646,"mtime":1651036035146,"results":"26","hashOfConfig":"16"},{"size":883,"mtime":1651035813978,"results":"27","hashOfConfig":"16"},{"size":944,"mtime":1651035281565,"results":"28","hashOfConfig":"16"},{"size":7671,"mtime":1651013989247,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},"17rsai8",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"34"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"34"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/index.tsx",["81"],[],"import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Theme } from \"@twilio-paste/core/theme\";\nimport { CustomizationProvider } from \"@twilio-paste/core/customization\";\n\nexport const Index: React.FC = (props) => {\n  const customStyle = {\n    fontWeights: {\n      fontWeightNormal: \"light\",\n      fontWeightMedium: \"500\",\n      fontWeightBold: \"600\",\n    },\n  };\n\n  const pageStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n  };\n\n  return (\n    <div className=\"funkyBg\" style={pageStyle}>\n      <style>\n      @import url('http://fonts.cdnfonts.com/css/willy-wonka');\n      @import url('https://fonts.googleapis.com/css2?family=Nunito:wght@200&display=swap');\n      </style>\n      <img className=\"logo\" alt=\"logo\" src=\"twilio.png\"/>\n      <img className=\"borderImage\" alt=\"Candy-border\" src=\"candy-border.png\"/>\n      <div className=\"footer\">\n         <p className=\"footerText\">Powered by Twilio Verify <img className=\"footerLogo\" alt=\"twilio-logo\" src=\"twilio.png\"/></p>\n      </div>\n      <BrowserRouter>\n        <CustomizationProvider baseTheme=\"default\" theme={customStyle}>\n          <App></App>\n        </CustomizationProvider>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Index />\n  </React.StrictMode>,\n  document.querySelector(\"#root\")\n);\n\n/**\n * If you want to start measuring performance in your app, pass a function\n * to log results (for example: reportWebVitals(console.log))\n * or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n */\n// eslint-disable-next-line no-console\nreportWebVitals(console.log);\n",[],"/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/reportWebVitals.ts",[],[],"/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/App.tsx",[],[],"/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/UserContext.tsx",[],[],"/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/components/Loading.tsx",[],[],"/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/Channels.tsx",["82","83"],[],"import * as React from \"react\";\nimport { Card } from \"@twilio-paste/core/card\";\nimport { Button } from \"@twilio-paste/core/button\";\nimport { Heading } from \"@twilio-paste/core/heading\";\nimport { Text } from \"@twilio-paste/core/text\";\nimport { Flex, Paragraph, Stack } from \"@twilio-paste/core\";\n\nimport { ProductMessagingIcon } from \"@twilio-paste/icons/esm/ProductMessagingIcon\";\nimport { SendIcon } from \"@twilio-paste/icons/esm/SendIcon\";\nimport { VoiceCapableIcon } from \"@twilio-paste/icons/esm/VoiceCapableIcon\";\nimport { ChatIcon } from \"@twilio-paste/icons/esm/ChatIcon\";\n\nimport UserContext from \"../UserContext\";\n\ninterface ChannelProps {\n  verifyVia: (channelType: string, address: string) => void;\n}\n\nexport const Channels: React.FC<ChannelProps> = (props) => {\n  const user = React.useContext(UserContext);\n\n  const obscureEmail = (email: string) => {\n    if (email.length === 0) return \"\";\n    const [name, domain] = email.split(\"@\");\n    return `${name[0]}${new Array(name.length).join(\"*\")}@${domain}`;\n  };\n\n  const obscurePhone = (phone: string) => {\n    if (phone.length === 0) return \"\";\n    const startDigits = phone.slice(0, 4);\n    const endDigits = phone.slice(-3);\n    return `${startDigits}${new Array(phone.length - (4 + 3)).join(\n      \"*\"\n    )}${endDigits}`;\n  };\n\n  const email = obscureEmail(user.email);\n  const phone = obscurePhone(user.phone);\n\n  return (\n    <Flex padding=\"space200\" hAlignContent=\"center\" height=\"100vh\" grow>\n        <Text as=\"div\" textAlign=\"center\">\n        <img alt=\"candy\" src=\"candy.png\" className=\"candy\"/>\n          <Heading as=\"h2\" variant=\"heading10\" >\n            Ahoy, {user.name}!\n          </Heading>\n          <Heading as=\"h3\" variant=\"heading10\">\n            How should we verify it's you?\n          </Heading>\n          <Heading as=\"h3\" variant=\"heading20\">\n            Pick a channel where you can receive a verfication code right now\n          </Heading>\n        \n        <Flex paddingTop=\"space200\" vAlignContent=\"center\" hAlignContent=\"center\">\n          <Stack\n            orientation={[\"horizontal\"]}\n            spacing=\"space100\"\n          >\n            <Button className=\"channelCircle\"\n              variant=\"destructive_secondary\"\n              fullWidth={true}\n              onClick={() => props.verifyVia(\"call\", user.phone)}\n            >\n              <VoiceCapableIcon\n                decorative={false}\n                title=\"Ring me\"\n                size=\"sizeIcon110\"\n              />\n              Call <br /> {phone}\n            </Button>\n            <Button\n              fullWidth={true}\n              variant=\"destructive_secondary\"\n              onClick={() => props.verifyVia(\"whatsapp\", user.phone)}\n            >\n              <ChatIcon\n                decorative={false}\n                title=\"Shoot me a whatsapp message\"\n                size=\"sizeIcon110\"\n              />\n              WhatsApp <br />\n              {phone}\n            </Button>\n            <Button\n              variant=\"destructive_secondary\"\n              fullWidth={true}\n              onClick={() => props.verifyVia(\"sms\", user.phone)}\n            >\n              <ProductMessagingIcon\n                decorative={false}\n                title=\"Shoot me a text\"\n                size=\"sizeIcon110\"\n              />\n              SMS <br />\n              {phone}\n            </Button>\n            <Button\n              disabled={true}\n              variant=\"destructive_secondary\"\n              fullWidth={true}\n              onClick={() => props.verifyVia(\"email\", user.email)}\n            >\n              <SendIcon\n                decorative={false}\n                title=\"Shoot me an email\"\n                size=\"sizeIcon110\"\n              />\n              Email <br /> {email}\n            </Button>\n          </Stack>\n        </Flex>\n        </Text>\n    </Flex>\n  );\n};\n","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/Sending.tsx",["84"],[],"/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/Validating.tsx",["85"],[],"import React from \"react\";\nimport { Card } from \"@twilio-paste/core/card\";\nimport { Heading } from \"@twilio-paste/core/heading\";\nimport { Text } from \"@twilio-paste/core/text\";\nimport { Flex, Paragraph, Stack } from \"@twilio-paste/core\";\nimport { Spinner } from \"@twilio-paste/spinner\";\nimport { Button } from \"@twilio-paste/core/button\";\nimport { useNavigate } from \"react-router-dom\";\nimport UserContext from \"../UserContext\";\n\nexport const Validating: React.FC = () => {\n  const user = React.useContext(UserContext);\n\n  const navigate = useNavigate();\n\n  const [counter, setCounter] = React.useState(60);\n  React.useEffect(() => {\n    counter > 0 && setTimeout(() => setCounter(counter - 1), 1000);\n  }, [counter]);\n\n  return (\n    <Flex padding=\"space200\" hAlignContent=\"center\" height=\"100vh\" grow>\n        <Text as=\"div\" textAlign=\"center\">\n        <img alt=\"candy\" src=\"candy.png\" className=\"candy\"/>\n          <Heading as=\"h2\" variant=\"heading10\">\n            Hang tight, {user.name}!\n          </Heading>\n          <Heading as=\"h3\" variant=\"heading30\">Thanks! We're securely verifying your input now</Heading>\n          <Flex hAlignContent=\"center\" vertical>\n            <Paragraph>\n              <Spinner\n                size=\"sizeIcon110\"\n                color=\"colorTextSuccess\"\n                decorative={false}\n                title=\"Loading\"\n              />\n            </Paragraph>\n          </Flex>\n        \n        <Flex vAlignContent=\"center\" hAlignContent=\"center\" grow>\n          <Stack orientation=\"horizontal\" spacing=\"space60\">\n            <Button\n              variant=\"destructive_secondary\"\n              disabled={counter > 0}\n              onClick={() => navigate(\"/ocr\")}\n            >\n              Try verfification code again\n              {counter > 0 && \" in \" + counter}\n            </Button>\n          </Stack>\n        </Flex>\n        </Text>\n    </Flex>\n  );\n};\n","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/OCR.tsx",["86","87"],[],"import * as React from \"react\";\nimport { Card } from \"@twilio-paste/core/card\";\nimport { Button } from \"@twilio-paste/core/button\";\nimport { Text } from \"@twilio-paste/core/text\";\nimport { Flex, Stack, Alert } from \"@twilio-paste/core\";\nimport { useTheme } from \"@twilio-paste/theme\";\nimport { default as Handwriting } from \"../HandwritingCanvas.js\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Heading } from \"@twilio-paste/core/heading\";\n\ninterface OCRProps {\n  onVerification: (token: string) => void;\n}\n\nexport const OCR: React.FC<OCRProps> = (props) => {\n  const theme = useTheme();\n  const navigate = useNavigate();\n\n  const [handwriting] = React.useState(new Handwriting());\n  const [ocrResult, setOcrResult] = React.useState(\"\");\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [haveCode, setHaveCode] = React.useState(false);\n\n  // Set display size (vw/vh).\n  const canvasWidth = (80 * window.innerWidth) / 100;\n  const canvasHeight = (30 * window.innerHeight) / 100 || 766;\n\n  const handleDoneClick = () => {\n    if (!haveCode) {\n      setIsProcessing(true);\n      handwriting.recognize();\n    } else {\n      setIsProcessing(true);\n      props.onVerification(ocrResult);\n    }\n  };\n\n  const handleClear = () => {\n    handwriting.erase();\n    setIsProcessing(false);\n    setHaveCode(false);\n  };\n\n  const canvasStyle = {\n    cursor: \"crosshair\",\n    backgroundColor: theme.backgroundColors.colorBackgroundInverse,\n    borderRadius: \"3%\"\n  };\n\n  React.useEffect(() => {\n    var el = document.getElementById(\"can\");\n    console.log(\"Canvas element\", el);\n    handwriting.Canvas(el, 3, theme.textColors.colorTextInverse);\n    handwriting.setCallBack((data: any) => {\n      console.log(\"Handwriting callback\", data);\n      if (data instanceof Array) {\n        setOcrResult(data[0]);\n        setIsProcessing(false);\n        setHaveCode(true);\n      }\n    });\n  }, [handwriting, theme.textColors.colorTextInverse]);\n\n  const [counter, setCounter] = React.useState(30);\n\n  React.useEffect(() => {\n    const timer: ReturnType<typeof setTimeout> = setTimeout(() => {\n      if (counter <= 0) return;\n      setCounter(counter - 1);\n    }, 1000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [counter]);\n\n  return (\n    <>\n      <Flex padding=\"space200\" hAlignContent=\"center\" height=\"100vh\" grow>\n        <Stack orientation=\"vertical\" spacing=\"space60\">\n        <img alt=\"candy\" src=\"candy.png\" className=\"candy\"/>\n            <Heading as=\"h3\" variant=\"heading30\">\n                Using your finger, write the verification code you just received\n            </Heading>\n          <Flex vAlignContent=\"center\" hAlignContent=\"center\" >\n            <div className=\"card\">\n              <Stack orientation=\"vertical\" spacing=\"space60\">\n                <canvas\n                  id=\"can\"\n                  width={canvasWidth}\n                  height={canvasHeight}\n                  style={canvasStyle}\n                ></canvas>\n\n                <Stack\n                  orientation={[\"vertical\",  \"horizontal\"]}\n                  spacing=\"space80\"\n                >\n                  \n                  <Button\n                    variant=\"primary\"\n                    fullWidth={true}\n                    onClick={handleDoneClick}\n                    loading={isProcessing}\n                  >\n                    {!haveCode && \"Check my writing\"}\n                    {haveCode && \"Yep that's right, verify me!\"}\n                  </Button>\n                  <Button\n                    variant=\"destructive_secondary\"\n                    fullWidth={true}\n                    onClick={handleClear}\n                  >\n                    Clear Screen\n                  </Button>\n                  <Button\n                    variant=\"secondary\"\n                    fullWidth={true}\n                    disabled={counter > 0}\n                    onClick={() => navigate(\"/channels\")}\n                  >\n                    Request new code\n                    {counter > 0 && \" in \" + counter}\n                  </Button>\n                  {haveCode && (\n                    <Text as=\"span\">\n                      I think you wrote <strong> {ocrResult}</strong>\n                    </Text>\n                  )}\n                </Stack>\n              </Stack>\n            </div>\n          </Flex>\n        </Stack>\n      </Flex>\n    </>\n  );\n};\n","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/Incorrect.tsx",["88"],[],"import React from \"react\";\nimport { Card } from \"@twilio-paste/core/card\";\nimport { Heading } from \"@twilio-paste/core/heading\";\nimport { Text } from \"@twilio-paste/core/text\";\nimport { Flex, Paragraph, Stack } from \"@twilio-paste/core\";\nimport { Spinner } from \"@twilio-paste/spinner\";\nimport { Button } from \"@twilio-paste/core/button\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const Incorrect: React.FC = () => {\n  const navigate = useNavigate();\n\n  const [counter, setCounter] = React.useState(15);\n  React.useEffect(() => {\n    counter > 0 && setTimeout(() => setCounter(counter - 1), 1000);\n  }, [counter]);\n\n  return (\n    <Flex padding=\"space200\" hAlignContent=\"center\" height=\"100vh\" grow>\n        <Text as=\"div\" textAlign=\"center\">\n        <img alt=\"candy\" src=\"candy.png\" className=\"candy\"/>\n          <Heading as=\"h2\" variant=\"heading10\">\n            Hmmm...That's not right\n          </Heading>\n\n          <Flex hAlignContent=\"center\" vertical>\n            <Paragraph>\n              <Spinner\n                size=\"sizeIcon110\"\n                color=\"colorTextSuccess\"\n                decorative={false}\n                title=\"Loading\"\n              />\n            </Paragraph>\n          </Flex>\n\n        <Flex vAlignContent=\"center\" hAlignContent=\"center\" grow>\n          <Stack\n            orientation={[\"vertical\", \"vertical\", \"horizontal\"]}\n            spacing=\"space60\"\n          >\n            <Button\n              variant=\"destructive\"\n              fullWidth={true}\n              onClick={() => navigate(\"/ocr\")}\n            >\n              Re-enter verfification code\n            </Button>\n\n            <Button\n              variant=\"destructive_secondary\"\n              fullWidth={true}\n              disabled={counter > 0}\n              onClick={() => navigate(\"/channels\")}\n            >\n              Verify me another way\n              {counter > 0 && \" in \" + counter}\n            </Button>\n          </Stack>\n        </Flex>\n        </Text>\n    </Flex>\n  );\n};\n","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/Dispense.tsx",["89","90"],[],"import React from \"react\";\nimport { Card } from \"@twilio-paste/core/card\";\nimport { Heading } from \"@twilio-paste/core/heading\";\nimport { Text } from \"@twilio-paste/core/text\";\nimport { Flex, Paragraph, Stack } from \"@twilio-paste/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport UserContext from \"../UserContext\";\n\nexport const Dispense: React.FC = () => {\n  const user = React.useContext(UserContext);\n\n  const navigate = useNavigate();\n\n  const [counter, setCounter] = React.useState(30);\n  React.useEffect(() => {\n    counter > 0 &&\n      setTimeout(() => {\n        setCounter(counter - 1);\n        if (counter === 1) navigate(\"/\");\n      }, 1000);\n  }, [counter, navigate]);\n\n  const styles = {\n    animation: \"rotation 4s infinite linear\",\n  };\n\n  return (\n    <Flex padding=\"space200\" hAlignContent=\"center\" height=\"100vh\" grow>\n  \n        <Text as=\"div\" textAlign=\"center\">\n          <Heading as=\"h2\" variant=\"heading10\">\n            It's really you!\n          </Heading>\n          <Heading as=\"h3\" variant=\"heading20\">\n            {user.name}, Thanks for participating in RED 2022.\n            <br />\n            We can't wait to see <strong>what you build!</strong>\n          </Heading>\n          <Flex hAlignContent=\"center\" vertical>\n            <img alt=\"Candy\" width=\"250px\" style={styles} src=\"candy.png\" />\n          </Flex>\n       \n        <Flex vAlignContent=\"center\" hAlignContent=\"center\" grow>\n          <Stack orientation=\"horizontal\" spacing=\"space60\">\n          <Heading as=\"h3\" variant=\"heading30\">Game will reset in {counter}</Heading>\n          </Stack>\n        </Flex>\n        </Text>\n    </Flex>\n  );\n};\n","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/IndexPage.tsx",["91"],[],"import React from \"react\";\nimport { Heading } from \"@twilio-paste/core/heading\";\nimport { Text } from \"@twilio-paste/core/text\";\nimport { Flex, Paragraph } from \"@twilio-paste/core\";\n\nexport const IndexPage: React.FC = () => {\n  const styles = {\n    animation: \"rotation 4s infinite linear\",\n  };\n\n  return (\n    <Flex paddingTop=\"space200\" hAlignContent=\"center\" height=\"100vh\" grow>\n        <Text as=\"div\" textAlign=\"center\">\n          <Heading id=\"Wonka\" as=\"h1\" variant=\"heading10\">\n            Candy\n          </Heading>\n          <Heading as=\"h2\" variant=\"heading40\">\n            MACHINE\n          </Heading>\n          <Flex hAlignContent=\"center\" vertical>\n            <img alt=\"Candy\" width=\"250px\" style={styles} src=\"candy.png\" />\n          </Flex>\n          <Heading as=\"h3\" variant=\"heading30\">Scan your badge to start</Heading>\n        </Text>\n     \n    </Flex>\n  );\n};\n","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/Error.tsx",["92","93"],[],"import * as React from \"react\";\nimport { Card } from \"@twilio-paste/core/card\";\nimport { Button } from \"@twilio-paste/core/button\";\nimport { Heading } from \"@twilio-paste/core/heading\";\nimport { Text } from \"@twilio-paste/core/text\";\nimport { Flex, Paragraph } from \"@twilio-paste/core\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const Error: React.FC = () => {\n  const navigate = useNavigate();\n  return (\n    <Flex vAlignContent=\"center\" hAlignContent=\"center\" height=\"100vh\" grow>\n      \n        <Text as=\"div\" textAlign=\"center\">\n          <Heading as=\"h2\" variant=\"heading40\">\n            Opps!\n          </Heading>\n          <br></br>\n          <br></br>\n          <Heading as=\"h3\" variant=\"heading30\">Looks like we hit a snag</Heading>\n          <br></br>\n          <Button variant=\"destructive_secondary\" onClick={() => navigate(\"/\")}>\n            Reset Game\n          </Button>\n        </Text>\n      \n    </Flex>\n  );\n};\n","/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/HandwritingCanvas.js",[],[],{"ruleId":"94","severity":1,"message":"95","line":6,"column":10,"nodeType":"96","messageId":"97","endLine":6,"endColumn":15},{"ruleId":"94","severity":1,"message":"98","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":14},{"ruleId":"94","severity":1,"message":"99","line":6,"column":16,"nodeType":"96","messageId":"97","endLine":6,"endColumn":25},{"ruleId":"94","severity":1,"message":"98","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":14},{"ruleId":"94","severity":1,"message":"98","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":14},{"ruleId":"94","severity":1,"message":"98","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":14},{"ruleId":"94","severity":1,"message":"100","line":5,"column":23,"nodeType":"96","messageId":"97","endLine":5,"endColumn":28},{"ruleId":"94","severity":1,"message":"98","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":14},{"ruleId":"94","severity":1,"message":"98","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":14},{"ruleId":"94","severity":1,"message":"99","line":5,"column":16,"nodeType":"96","messageId":"97","endLine":5,"endColumn":25},{"ruleId":"94","severity":1,"message":"99","line":4,"column":16,"nodeType":"96","messageId":"97","endLine":4,"endColumn":25},{"ruleId":"94","severity":1,"message":"98","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":14},{"ruleId":"94","severity":1,"message":"99","line":6,"column":16,"nodeType":"96","messageId":"97","endLine":6,"endColumn":25},"@typescript-eslint/no-unused-vars","'Theme' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'Paragraph' is defined but never used.","'Alert' is defined but never used."]