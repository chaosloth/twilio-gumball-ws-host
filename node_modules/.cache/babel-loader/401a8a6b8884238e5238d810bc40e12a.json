{"ast":null,"code":"var _jsxFileName = \"/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/OCR.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { Card } from \"@twilio-paste/core/card\";\nimport { Button } from \"@twilio-paste/core/button\";\nimport { Text } from \"@twilio-paste/core/text\";\nimport { Flex, Stack } from \"@twilio-paste/core\";\nimport { useTheme } from \"@twilio-paste/theme\";\nimport { default as Handwriting } from \"../HandwritingCanvas.js\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Heading } from \"@twilio-paste/core/heading\";\nexport const OCR = props => {\n  _s();\n\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const [handwriting] = React.useState(new Handwriting());\n  const [ocrResult, setOcrResult] = React.useState(\"\");\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [haveCode, setHaveCode] = React.useState(false); // Set display size (vw/vh).\n\n  const canvasWidth = 80 * window.innerWidth / 100;\n  const canvasHeight = 30 * window.innerHeight / 100 || 766;\n\n  const handleDoneClick = () => {\n    if (!haveCode) {\n      setIsProcessing(true);\n      handwriting.recognize();\n    } else {\n      setIsProcessing(true);\n      props.onVerification(ocrResult);\n    }\n  };\n\n  const handleClear = () => {\n    handwriting.erase();\n    setIsProcessing(false);\n    setHaveCode(false);\n  };\n\n  const canvasStyle = {\n    cursor: \"crosshair\",\n    backgroundColor: theme.backgroundColors.colorBackgroundInverse\n  };\n  React.useEffect(() => {\n    var el = document.getElementById(\"can\");\n    console.log(\"Canvas element\", el);\n    handwriting.Canvas(el, 3, theme.textColors.colorTextInverse);\n    handwriting.setCallBack(data => {\n      console.log(\"Handwriting callback\", data);\n\n      if (data instanceof Array) {\n        setOcrResult(data[0]);\n        setIsProcessing(false);\n        setHaveCode(true);\n      }\n    });\n  }, [handwriting, theme.textColors.colorTextInverse]);\n  const [counter, setCounter] = React.useState(30);\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      if (counter <= 0) return;\n      setCounter(counter - 1);\n    }, 1000);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [counter]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Flex, {\n    padding: \"space200\",\n    hAlignContent: \"center\",\n    height: \"100vh\",\n    grow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Stack, {\n    orientation: \"vertical\",\n    spacing: \"space60\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"candy\",\n    src: \"candy.png\",\n    className: \"candy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Heading, {\n    as: \"h3\",\n    variant: \"heading30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Using your finger, write the verification code you just received\"), /*#__PURE__*/React.createElement(Flex, {\n    vAlignContent: \"center\",\n    hAlignContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    padding: \"space70\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Stack, {\n    orientation: \"vertical\",\n    spacing: \"space60\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    id: \"can\",\n    width: canvasWidth,\n    height: canvasHeight,\n    style: canvasStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Stack, {\n    orientation: [\"vertical\", \"vertical\", \"horizontal\"],\n    spacing: \"space40\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, haveCode && /*#__PURE__*/React.createElement(Text, {\n    as: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, \"I think you wrote \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 41\n    }\n  }, \" \", ocrResult)), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    fullWidth: true,\n    onClick: handleDoneClick,\n    loading: isProcessing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  }, !haveCode && \"Check my writing\", haveCode && \"Yep that's right, verify me!\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"destructive_secondary\",\n    fullWidth: true,\n    onClick: handleClear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 19\n    }\n  }, \"Clear\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"secondary\",\n    fullWidth: true,\n    disabled: counter > 0,\n    onClick: () => navigate(\"/channels\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 19\n    }\n  }, \"Request new code\", counter > 0 && \" in \" + counter))))))));\n};\n\n_s(OCR, \"hSys8TtIwE77uGCT7JBLGYiL12Q=\", false, function () {\n  return [useTheme, useNavigate];\n});\n\n_c = OCR;\n\nvar _c;\n\n$RefreshReg$(_c, \"OCR\");","map":{"version":3,"sources":["/Users/charland/Documents/GitHub/twilio-gumball-ws-host/src/pages/OCR.tsx"],"names":["React","Card","Button","Text","Flex","Stack","useTheme","default","Handwriting","useNavigate","Heading","OCR","props","theme","navigate","handwriting","useState","ocrResult","setOcrResult","isProcessing","setIsProcessing","haveCode","setHaveCode","canvasWidth","window","innerWidth","canvasHeight","innerHeight","handleDoneClick","recognize","onVerification","handleClear","erase","canvasStyle","cursor","backgroundColor","backgroundColors","colorBackgroundInverse","useEffect","el","document","getElementById","console","log","Canvas","textColors","colorTextInverse","setCallBack","data","Array","counter","setCounter","timer","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Card } from \"@twilio-paste/core/card\";\nimport { Button } from \"@twilio-paste/core/button\";\nimport { Text } from \"@twilio-paste/core/text\";\nimport { Flex, Stack, Alert } from \"@twilio-paste/core\";\nimport { useTheme } from \"@twilio-paste/theme\";\nimport { default as Handwriting } from \"../HandwritingCanvas.js\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Heading } from \"@twilio-paste/core/heading\";\n\ninterface OCRProps {\n  onVerification: (token: string) => void;\n}\n\nexport const OCR: React.FC<OCRProps> = (props) => {\n  const theme = useTheme();\n  const navigate = useNavigate();\n\n  const [handwriting] = React.useState(new Handwriting());\n  const [ocrResult, setOcrResult] = React.useState(\"\");\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [haveCode, setHaveCode] = React.useState(false);\n\n  // Set display size (vw/vh).\n  const canvasWidth = (80 * window.innerWidth) / 100;\n  const canvasHeight = (30 * window.innerHeight) / 100 || 766;\n\n  const handleDoneClick = () => {\n    if (!haveCode) {\n      setIsProcessing(true);\n      handwriting.recognize();\n    } else {\n      setIsProcessing(true);\n      props.onVerification(ocrResult);\n    }\n  };\n\n  const handleClear = () => {\n    handwriting.erase();\n    setIsProcessing(false);\n    setHaveCode(false);\n  };\n\n  const canvasStyle = {\n    cursor: \"crosshair\",\n    backgroundColor: theme.backgroundColors.colorBackgroundInverse,\n  };\n\n  React.useEffect(() => {\n    var el = document.getElementById(\"can\");\n    console.log(\"Canvas element\", el);\n    handwriting.Canvas(el, 3, theme.textColors.colorTextInverse);\n    handwriting.setCallBack((data: any) => {\n      console.log(\"Handwriting callback\", data);\n      if (data instanceof Array) {\n        setOcrResult(data[0]);\n        setIsProcessing(false);\n        setHaveCode(true);\n      }\n    });\n  }, [handwriting, theme.textColors.colorTextInverse]);\n\n  const [counter, setCounter] = React.useState(30);\n\n  React.useEffect(() => {\n    const timer: ReturnType<typeof setTimeout> = setTimeout(() => {\n      if (counter <= 0) return;\n      setCounter(counter - 1);\n    }, 1000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [counter]);\n\n  return (\n    <>\n      <Flex padding=\"space200\" hAlignContent=\"center\" height=\"100vh\" grow>\n        <Stack orientation=\"vertical\" spacing=\"space60\">\n        <img alt=\"candy\" src=\"candy.png\" className=\"candy\"/>\n            <Heading as=\"h3\" variant=\"heading30\">\n                Using your finger, write the verification code you just received\n            </Heading>\n          <Flex vAlignContent=\"center\" hAlignContent=\"center\">\n            <Card padding=\"space70\">\n              <Stack orientation=\"vertical\" spacing=\"space60\">\n                <canvas\n                  id=\"can\"\n                  width={canvasWidth}\n                  height={canvasHeight}\n                  style={canvasStyle}\n                ></canvas>\n\n                <Stack\n                  orientation={[\"vertical\", \"vertical\", \"horizontal\"]}\n                  spacing=\"space40\"\n                >\n                  {haveCode && (\n                    <Text as=\"span\">\n                      I think you wrote <strong> {ocrResult}</strong>\n                    </Text>\n                  )}\n                  <Button\n                    variant=\"primary\"\n                    fullWidth={true}\n                    onClick={handleDoneClick}\n                    loading={isProcessing}\n                  >\n                    {!haveCode && \"Check my writing\"}\n                    {haveCode && \"Yep that's right, verify me!\"}\n                  </Button>\n                  <Button\n                    variant=\"destructive_secondary\"\n                    fullWidth={true}\n                    onClick={handleClear}\n                  >\n                    Clear\n                  </Button>\n                  <Button\n                    variant=\"secondary\"\n                    fullWidth={true}\n                    disabled={counter > 0}\n                    onClick={() => navigate(\"/channels\")}\n                  >\n                    Request new code\n                    {counter > 0 && \" in \" + counter}\n                  </Button>\n                </Stack>\n              </Stack>\n            </Card>\n          </Flex>\n        </Stack>\n      </Flex>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}