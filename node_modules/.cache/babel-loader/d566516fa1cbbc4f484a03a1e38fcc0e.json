{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.websocketWrapper = void 0;\n\nexports.websocketWrapper = function (webSocket, start) {\n  return new Proxy(webSocket, {\n    get: function (obj, key) {\n      var val = obj[key];\n      if (key === 'reconnect') return start;\n\n      if (typeof val === 'function') {\n        console.error('Calling methods directly on the websocket is not supported at this moment. You must use the methods returned by useWebSocket.'); //Prevent error thrown by invoking a non-function\n\n        return function () {};\n      } else {\n        return val;\n      }\n    },\n    set: function (obj, key, val) {\n      if (/^on/.test(key)) {\n        console.warn('The websocket\\'s event handlers should be defined through the options object passed into useWebSocket.');\n        return false;\n      } else {\n        obj[key] = val;\n        return true;\n      }\n    }\n  });\n};\n\nexports.default = exports.websocketWrapper;","map":{"version":3,"mappings":";;;;;;;AAUaA,2BAAmB,UAC9BC,SAD8B,EAE9BC,KAF8B,EAEK;AAGnC,SAAO,IAAIC,KAAJ,CAAqBF,SAArB,EAAgC;AACrCG,OAAG,EAAE,UAACC,GAAD,EAAMC,GAAN,EAA0B;AAC7B,UAAMC,GAAG,GAAGF,GAAG,CAACC,GAAD,CAAf;AACA,UAAKA,GAAW,KAAK,WAArB,EAAkC,OAAOJ,KAAP;;AAClC,UAAI,OAAOK,GAAP,KAAe,UAAnB,EAA+B;AAC7BC,eAAO,CAACC,KAAR,CAAc,+HAAd,EAD6B,CAG7B;;AACA,eAAO,aAAQ,CAAf;AACD,OALD,MAKO;AACL,eAAOF,GAAP;AACD;AACF,KAZoC;AAarCG,OAAG,EAAE,UAACL,GAAD,EAAiBC,GAAjB,EAA8CC,GAA9C,EAAsD;AACzD,UAAI,MAAMI,IAAN,CAAWL,GAAX,CAAJ,EAAqB;AACnBE,eAAO,CAACI,IAAR,CAAa,wGAAb;AACA,eAAO,KAAP;AACD,OAHD,MAGO;AACLP,WAAG,CAACC,GAAD,CAAH,GAAWC,GAAX;AACA,eAAO,IAAP;AACD;AACF;AArBoC,GAAhC,CAAP;AAuBD,CA5BY;;AA8BbP,kBAAeA,wBAAf","names":["exports","webSocket","start","Proxy","get","obj","key","val","console","error","set","test","warn"],"sources":["/Users/charland/Documents/GitHub/twilio-gumball-ws-host/node_modules/react-use-websocket/src/lib/proxy.ts"],"sourcesContent":["import { MutableRefObject } from 'react';\n\ntype IfEquals<X, Y, A=X, B=never> =\n  (<T>() => T extends X ? 1 : 2) extends\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\n\ntype WritableKeys<T> = {\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>\n}[keyof T];\n\nexport const websocketWrapper = (\n  webSocket: WebSocket,\n  start: MutableRefObject<() => void>,\n): WebSocket => {\n\n  return new Proxy<WebSocket>(webSocket, {\n    get: (obj, key: keyof WebSocket) => {\n      const val = obj[key];\n      if ((key as any) === 'reconnect') return start;\n      if (typeof val === 'function') {\n        console.error('Calling methods directly on the websocket is not supported at this moment. You must use the methods returned by useWebSocket.');\n        \n        //Prevent error thrown by invoking a non-function\n        return () => {};\n      } else {\n        return val;\n      }\n    },\n    set: (obj: WebSocket, key:WritableKeys<WebSocket>, val: any) => {\n      if (/^on/.test(key)) {\n        console.warn('The websocket\\'s event handlers should be defined through the options object passed into useWebSocket.')\n        return false;\n      } else {\n        obj[key] = val;\n        return true;\n      }\n    },\n  });\n};\n\nexport default websocketWrapper;\n"]},"metadata":{},"sourceType":"script"}